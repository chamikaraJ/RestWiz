/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.cwmwsql.PtdetailReg;
import com.restwiz.cwmwsql.service.PtdetailRegService;


/**
 * Controller object for domain model class PtdetailReg.
 * @see PtdetailReg
 */
@RestController("CWmwSQL.PtdetailRegController")
@Api(value = "PtdetailRegController", description = "Exposes APIs to work with PtdetailReg resource.")
@RequestMapping("/CWmwSQL/PtdetailReg")
public class PtdetailRegController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtdetailRegController.class);

    @Autowired
	@Qualifier("CWmwSQL.PtdetailRegService")
	private PtdetailRegService ptdetailRegService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PtdetailReg instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtdetailReg createPtdetailReg(@RequestBody PtdetailReg ptdetailReg) {
		LOGGER.debug("Create PtdetailReg with information: {}" , ptdetailReg);

		ptdetailReg = ptdetailRegService.create(ptdetailReg);
		LOGGER.debug("Created PtdetailReg with information: {}" , ptdetailReg);

	    return ptdetailReg;
	}

    @ApiOperation(value = "Returns the PtdetailReg instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtdetailReg getPtdetailReg(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PtdetailReg with id: {}" , id);

        PtdetailReg foundPtdetailReg = ptdetailRegService.getById(id);
        LOGGER.debug("PtdetailReg details with id: {}" , foundPtdetailReg);

        return foundPtdetailReg;
    }

    @ApiOperation(value = "Updates the PtdetailReg instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtdetailReg editPtdetailReg(@PathVariable("id") Integer id, @RequestBody PtdetailReg ptdetailReg) {
        LOGGER.debug("Editing PtdetailReg with id: {}" , ptdetailReg.getIdno());

        ptdetailReg.setIdno(id);
        ptdetailReg = ptdetailRegService.update(ptdetailReg);
        LOGGER.debug("PtdetailReg details with id: {}" , ptdetailReg);

        return ptdetailReg;
    }

    @ApiOperation(value = "Deletes the PtdetailReg instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePtdetailReg(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PtdetailReg with id: {}" , id);

        PtdetailReg deletedPtdetailReg = ptdetailRegService.delete(id);

        return deletedPtdetailReg != null;
    }

    /**
     * @deprecated Use {@link #findPtdetailRegs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PtdetailReg instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtdetailReg> searchPtdetailRegsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PtdetailRegs list by query filter:{}", (Object) queryFilters);
        return ptdetailRegService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PtdetailReg instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtdetailReg> findPtdetailRegs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PtdetailRegs list by filter:", query);
        return ptdetailRegService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PtdetailReg instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtdetailReg> filterPtdetailRegs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PtdetailRegs list by filter", query);
        return ptdetailRegService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPtdetailRegs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return ptdetailRegService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPtdetailRegsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PtdetailReg.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> ptdetailRegService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PtdetailReg instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPtdetailRegs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PtdetailRegs");
		return ptdetailRegService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPtdetailRegAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return ptdetailRegService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PtdetailRegService instance
	 */
	protected void setPtdetailRegService(PtdetailRegService service) {
		this.ptdetailRegService = service;
	}

}