/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.restwiz.cwmwsql.service.CWmwSQLQueryExecutorService;
import com.restwiz.cwmwsql.models.query.*;

@RestController(value = "CWmwSQL.QueryExecutionController")
@RequestMapping("/CWmwSQL/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private CWmwSQLQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/qryInsertPtCharacter", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert ptCharacter")
    public IntegerWrapper executeQryInsertPtCharacter(@Valid @RequestBody QryInsertPtCharacterRequest qryInsertPtCharacterRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryInsertPtCharacter");
        Integer _result = queryService.executeQryInsertPtCharacter(qryInsertPtCharacterRequest);
        LOGGER.debug("got the result for named query: qryInsertPtCharacter, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryInsertPrescriptionHeader", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert prescription header")
    public IntegerWrapper executeQryInsertPrescriptionHeader(@Valid @RequestBody QryInsertPrescriptionHeaderRequest qryInsertPrescriptionHeaderRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryInsertPrescriptionHeader");
        Integer _result = queryService.executeQryInsertPrescriptionHeader(qryInsertPrescriptionHeaderRequest);
        LOGGER.debug("got the result for named query: qryInsertPrescriptionHeader, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryInsertPrescriptionDtl", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert prescription details")
    public IntegerWrapper executeQryInsertPrescriptionDtl(@Valid @RequestBody QryInsertPrescriptionDtlRequest qryInsertPrescriptionDtlRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryInsertPrescriptionDtl");
        Integer _result = queryService.executeQryInsertPrescriptionDtl(qryInsertPrescriptionDtlRequest);
        LOGGER.debug("got the result for named query: qryInsertPrescriptionDtl, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetPatientNumberByUnamePass", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getpatient Number by username and password")
    public Page<QryGetPatientNumberByUnamePassResponse> executeQryGetPatientNumberByUnamePass(@RequestParam(value = "t_userid") String tuserid, @RequestParam(value = "t_pass") String tpass, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPatientNumberByUnamePass");
        Page<QryGetPatientNumberByUnamePassResponse> _result = queryService.executeQryGetPatientNumberByUnamePass(tuserid, tpass, pageable);
        LOGGER.debug("got the result for named query: qryGetPatientNumberByUnamePass, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPatientNumberByUnamePass")
    @RequestMapping(value = "/queries/qryGetPatientNumberByUnamePass/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPatientNumberByUnamePass(@RequestParam(value = "t_userid") String tuserid, @RequestParam(value = "t_pass") String tpass, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPatientNumberByUnamePass");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPatientNumberByUnamePass";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPatientNumberByUnamePass(tuserid, tpass,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetPatientByMedicareno", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get patient by medicare no")
    public Page<QryGetPatientByMedicarenoResponse> executeQryGetPatientByMedicareno(@RequestParam(value = "t_medicareno") String tmedicareno, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPatientByMedicareno");
        Page<QryGetPatientByMedicarenoResponse> _result = queryService.executeQryGetPatientByMedicareno(tmedicareno, pageable);
        LOGGER.debug("got the result for named query: qryGetPatientByMedicareno, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPatientByMedicareno")
    @RequestMapping(value = "/queries/qryGetPatientByMedicareno/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPatientByMedicareno(@RequestParam(value = "t_medicareno") String tmedicareno, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPatientByMedicareno");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPatientByMedicareno";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPatientByMedicareno(tmedicareno,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryUpdatePatient", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Patient Details")
    public IntegerWrapper executeQryUpdatePatient(@Valid @RequestBody QryUpdatePatientRequest qryUpdatePatientRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdatePatient");
        Integer _result = queryService.executeQryUpdatePatient(qryUpdatePatientRequest);
        LOGGER.debug("got the result for named query: qryUpdatePatient, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetPatientNoAndRole", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Patient no and role")
    public Page<QryGetPatientNoAndRoleResponse> executeQryGetPatientNoAndRole(@RequestParam(value = "t_userid") String tuserid, @RequestParam(value = "t_pass") String tpass, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPatientNoAndRole");
        Page<QryGetPatientNoAndRoleResponse> _result = queryService.executeQryGetPatientNoAndRole(tuserid, tpass, pageable);
        LOGGER.debug("got the result for named query: qryGetPatientNoAndRole, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPatientNoAndRole")
    @RequestMapping(value = "/queries/qryGetPatientNoAndRole/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPatientNoAndRole(@RequestParam(value = "t_userid") String tuserid, @RequestParam(value = "t_pass") String tpass, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPatientNoAndRole");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPatientNoAndRole";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPatientNoAndRole(tuserid, tpass,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryDeleteptDetailRegByIdno", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "delete saved patient from reg file")
    public IntegerWrapper executeQryDeleteptDetailRegByIdno(@RequestParam(value = "idno") Integer idno, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryDeleteptDetailRegByIdno");
        Integer _result = queryService.executeQryDeleteptDetailRegByIdno(idno);
        LOGGER.debug("got the result for named query: qryDeleteptDetailRegByIdno, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetPatientByUnamePass", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get patient by username and password")
    public Page<QryGetPatientByUnamePassResponse> executeQryGetPatientByUnamePass(@RequestParam(value = "t_username") String tusername, @RequestParam(value = "t_pass") String tpass, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPatientByUnamePass");
        Page<QryGetPatientByUnamePassResponse> _result = queryService.executeQryGetPatientByUnamePass(tusername, tpass, pageable);
        LOGGER.debug("got the result for named query: qryGetPatientByUnamePass, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPatientByUnamePass")
    @RequestMapping(value = "/queries/qryGetPatientByUnamePass/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPatientByUnamePass(@RequestParam(value = "t_username") String tusername, @RequestParam(value = "t_pass") String tpass, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPatientByUnamePass");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPatientByUnamePass";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPatientByUnamePass(tusername, tpass,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryUpdateptdetailReg", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update ptdetailreg table")
    public IntegerWrapper executeQryUpdateptdetailReg(@Valid @RequestBody QryUpdateptdetailRegRequest qryUpdateptdetailRegRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdateptdetailReg");
        Integer _result = queryService.executeQryUpdateptdetailReg(qryUpdateptdetailRegRequest);
        LOGGER.debug("got the result for named query: qryUpdateptdetailReg, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetJsonTextByPatientNo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get json text by patient number for update")
    public Page<QryGetJsonTextByPatientNoResponse> executeQryGetJsonTextByPatientNo(@RequestParam(value = "t_patientno") String tpatientno, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetJsonTextByPatientNo");
        Page<QryGetJsonTextByPatientNoResponse> _result = queryService.executeQryGetJsonTextByPatientNo(tpatientno, pageable);
        LOGGER.debug("got the result for named query: qryGetJsonTextByPatientNo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetJsonTextByPatientNo")
    @RequestMapping(value = "/queries/qryGetJsonTextByPatientNo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetJsonTextByPatientNo(@RequestParam(value = "t_patientno") String tpatientno, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetJsonTextByPatientNo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetJsonTextByPatientNo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetJsonTextByPatientNo(tpatientno,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetPatientByPatientNo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Patient by patient No")
    public Page<QryGetPatientByPatientNoResponse> executeQryGetPatientByPatientNo(@RequestParam(value = "t_patientno") String tpatientno, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPatientByPatientNo");
        Page<QryGetPatientByPatientNoResponse> _result = queryService.executeQryGetPatientByPatientNo(tpatientno, pageable);
        LOGGER.debug("got the result for named query: qryGetPatientByPatientNo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPatientByPatientNo")
    @RequestMapping(value = "/queries/qryGetPatientByPatientNo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPatientByPatientNo(@RequestParam(value = "t_patientno") String tpatientno, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPatientByPatientNo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPatientByPatientNo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPatientByPatientNo(tpatientno,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetVerifiedPatients", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get verified patients")
    public Page<QryGetVerifiedPatientsResponse> executeQryGetVerifiedPatients(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetVerifiedPatients");
        Page<QryGetVerifiedPatientsResponse> _result = queryService.executeQryGetVerifiedPatients(pageable);
        LOGGER.debug("got the result for named query: qryGetVerifiedPatients, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetVerifiedPatients")
    @RequestMapping(value = "/queries/qryGetVerifiedPatients/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetVerifiedPatients(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetVerifiedPatients");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetVerifiedPatients";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetVerifiedPatients( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetClinCatDatByCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get clinCatDat by code")
    public Page<QryGetClinCatDatByCodeResponse> executeQryGetClinCatDatByCode(@RequestParam(value = "t_code") String tcode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetClinCatDatByCode");
        Page<QryGetClinCatDatByCodeResponse> _result = queryService.executeQryGetClinCatDatByCode(tcode, pageable);
        LOGGER.debug("got the result for named query: qryGetClinCatDatByCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetClinCatDatByCode")
    @RequestMapping(value = "/queries/qryGetClinCatDatByCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetClinCatDatByCode(@RequestParam(value = "t_code") String tcode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetClinCatDatByCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetClinCatDatByCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetClinCatDatByCode(tcode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetPatientByUnamePassMed", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get patient by username password and medicareno")
    public Page<QryGetPatientByUnamePassMedResponse> executeQryGetPatientByUnamePassMed(@RequestParam(value = "t_username") String tusername, @RequestParam(value = "t_pass") String tpass, @RequestParam(value = "t_medicareno") String tmedicareno, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPatientByUnamePassMed");
        Page<QryGetPatientByUnamePassMedResponse> _result = queryService.executeQryGetPatientByUnamePassMed(tusername, tpass, tmedicareno, pageable);
        LOGGER.debug("got the result for named query: qryGetPatientByUnamePassMed, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPatientByUnamePassMed")
    @RequestMapping(value = "/queries/qryGetPatientByUnamePassMed/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPatientByUnamePassMed(@RequestParam(value = "t_username") String tusername, @RequestParam(value = "t_pass") String tpass, @RequestParam(value = "t_medicareno") String tmedicareno, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPatientByUnamePassMed");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPatientByUnamePassMed";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPatientByUnamePassMed(tusername, tpass, tmedicareno,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryUpdatePatientNo", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update patient number to login table")
    public IntegerWrapper executeQryUpdatePatientNo(@Valid @RequestBody QryUpdatePatientNoRequest qryUpdatePatientNoRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdatePatientNo");
        Integer _result = queryService.executeQryUpdatePatientNo(qryUpdatePatientNoRequest);
        LOGGER.debug("got the result for named query: qryUpdatePatientNo, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryInsertPatientDetails", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert patient details to ptdetail")
    public IntegerWrapper executeQryInsertPatientDetails(@Valid @RequestBody QryInsertPatientDetailsRequest qryInsertPatientDetailsRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryInsertPatientDetails");
        Integer _result = queryService.executeQryInsertPatientDetails(qryInsertPatientDetailsRequest);
        LOGGER.debug("got the result for named query: qryInsertPatientDetails, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetReferralSrc", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get referral source")
    public Page<QryGetReferralSrcResponse> executeQryGetReferralSrc(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetReferralSrc");
        Page<QryGetReferralSrcResponse> _result = queryService.executeQryGetReferralSrc(pageable);
        LOGGER.debug("got the result for named query: qryGetReferralSrc, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetReferralSrc")
    @RequestMapping(value = "/queries/qryGetReferralSrc/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetReferralSrc(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetReferralSrc");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetReferralSrc";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetReferralSrc( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryUpdateAccountNo", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update account no")
    public IntegerWrapper executeQryUpdateAccountNo(@Valid @RequestBody QryUpdateAccountNoRequest qryUpdateAccountNoRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdateAccountNo");
        Integer _result = queryService.executeQryUpdateAccountNo(qryUpdateAccountNoRequest);
        LOGGER.debug("got the result for named query: qryUpdateAccountNo, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryUpdatePtDetailRegStatus", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update ptdetailReg status")
    public IntegerWrapper executeQryUpdatePtDetailRegStatus(@Valid @RequestBody QryUpdatePtDetailRegStatusRequest qryUpdatePtDetailRegStatusRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdatePtDetailRegStatus");
        Integer _result = queryService.executeQryUpdatePtDetailRegStatus(qryUpdatePtDetailRegStatusRequest);
        LOGGER.debug("got the result for named query: qryUpdatePtDetailRegStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetCountryCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Country code by country Name")
    public Page<QryGetCountryCodeResponse> executeQryGetCountryCode(@RequestParam(value = "countryName") String countryName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetCountryCode");
        Page<QryGetCountryCodeResponse> _result = queryService.executeQryGetCountryCode(countryName, pageable);
        LOGGER.debug("got the result for named query: qryGetCountryCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetCountryCode")
    @RequestMapping(value = "/queries/qryGetCountryCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetCountryCode(@RequestParam(value = "countryName") String countryName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetCountryCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetCountryCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetCountryCode(countryName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetUserLogin", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get user by username and password")
    public Page<QryGetUserLoginResponse> executeQryGetUserLogin(@RequestParam(value = "t_userid") String tuserid, @RequestParam(value = "t_pass") String tpass, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetUserLogin");
        Page<QryGetUserLoginResponse> _result = queryService.executeQryGetUserLogin(tuserid, tpass, pageable);
        LOGGER.debug("got the result for named query: qryGetUserLogin, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetUserLogin")
    @RequestMapping(value = "/queries/qryGetUserLogin/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetUserLogin(@RequestParam(value = "t_userid") String tuserid, @RequestParam(value = "t_pass") String tpass, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetUserLogin");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetUserLogin";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetUserLogin(tuserid, tpass,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryInsertClinicalConclutions", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert medical history")
    public IntegerWrapper executeQryInsertClinicalConclutions(@Valid @RequestBody QryInsertClinicalConclutionsRequest qryInsertClinicalConclutionsRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryInsertClinicalConclutions");
        Integer _result = queryService.executeQryInsertClinicalConclutions(qryInsertClinicalConclutionsRequest);
        LOGGER.debug("got the result for named query: QryInsertClinicalConclutions, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryCheckUsernameExist", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "check the username is exist")
    public Page<QryCheckUsernameExistResponse> executeQryCheckUsernameExist(@RequestParam(value = "t_userid") String tuserid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryCheckUsernameExist");
        Page<QryCheckUsernameExistResponse> _result = queryService.executeQryCheckUsernameExist(tuserid, pageable);
        LOGGER.debug("got the result for named query: qryCheckUsernameExist, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryCheckUsernameExist")
    @RequestMapping(value = "/queries/qryCheckUsernameExist/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryCheckUsernameExist(@RequestParam(value = "t_userid") String tuserid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryCheckUsernameExist");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryCheckUsernameExist";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryCheckUsernameExist(tuserid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryUpdateAccount", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Account")
    public IntegerWrapper executeQryUpdateAccount(@Valid @RequestBody QryUpdateAccountRequest qryUpdateAccountRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdateAccount");
        Integer _result = queryService.executeQryUpdateAccount(qryUpdateAccountRequest);
        LOGGER.debug("got the result for named query: qryUpdateAccount, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetNextPatientNo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get next patient No")
    public Page<QryGetNextPatientNoResponse> executeQryGetNextPatientNo(@RequestParam(value = "t_idCode") String tidCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetNextPatientNo");
        Page<QryGetNextPatientNoResponse> _result = queryService.executeQryGetNextPatientNo(tidCode, pageable);
        LOGGER.debug("got the result for named query: qryGetNextPatientNo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetNextPatientNo")
    @RequestMapping(value = "/queries/qryGetNextPatientNo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetNextPatientNo(@RequestParam(value = "t_idCode") String tidCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetNextPatientNo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetNextPatientNo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetNextPatientNo(tidCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryUpdateNextPtGenCode", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update next generated code for patient")
    public IntegerWrapper executeQryUpdateNextPtGenCode(@Valid @RequestBody QryUpdateNextPtGenCodeRequest qryUpdateNextPtGenCodeRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdateNextPtGenCode");
        Integer _result = queryService.executeQryUpdateNextPtGenCode(qryUpdateNextPtGenCodeRequest);
        LOGGER.debug("got the result for named query: qryUpdateNextPtGenCode, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetUserAuth", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "User Auth")
    public Page<QryGetUserAuthResponse> executeQryGetUserAuth(@RequestParam(value = "t_userid") String tuserid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetUserAuth");
        Page<QryGetUserAuthResponse> _result = queryService.executeQryGetUserAuth(tuserid, pageable);
        LOGGER.debug("got the result for named query: qryGetUserAuth, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetUserAuth")
    @RequestMapping(value = "/queries/qryGetUserAuth/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetUserAuth(@RequestParam(value = "t_userid") String tuserid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetUserAuth");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetUserAuth";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetUserAuth(tuserid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryInsertAccount", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "save Account")
    public IntegerWrapper executeQryInsertAccount(@Valid @RequestBody QryInsertAccountRequest qryInsertAccountRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryInsertAccount");
        Integer _result = queryService.executeQryInsertAccount(qryInsertAccountRequest);
        LOGGER.debug("got the result for named query: qryInsertAccount, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetAllJsonText", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all json text")
    public Page<QryGetAllJsonTextResponse> executeQryGetAllJsonText(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetAllJsonText");
        Page<QryGetAllJsonTextResponse> _result = queryService.executeQryGetAllJsonText(pageable);
        LOGGER.debug("got the result for named query: qryGetAllJsonText, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetAllJsonText")
    @RequestMapping(value = "/queries/qryGetAllJsonText/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetAllJsonText(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetAllJsonText");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetAllJsonText";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetAllJsonText( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryUpdatePtCharacter", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update ptcharacter")
    public IntegerWrapper executeQryUpdatePtCharacter(@Valid @RequestBody QryUpdatePtCharacterRequest qryUpdatePtCharacterRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdatePtCharacter");
        Integer _result = queryService.executeQryUpdatePtCharacter(qryUpdatePtCharacterRequest);
        LOGGER.debug("got the result for named query: qryUpdatePtCharacter, result:{}", _result);
        return new IntegerWrapper(_result);
    }

}