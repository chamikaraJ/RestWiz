/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.restwiz.cwmwsql.service.CWmwSQLQueryExecutorService;
import com.restwiz.cwmwsql.models.query.*;

@RestController(value = "CWmwSQL.QueryExecutionController")
@RequestMapping("/CWmwSQL/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private CWmwSQLQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/qryUpdatePatient", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Patient Details")
    public IntegerWrapper executeQryUpdatePatient(@Valid @RequestBody QryUpdatePatientRequest qryUpdatePatientRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdatePatient");
        Integer _result = queryService.executeQryUpdatePatient(qryUpdatePatientRequest);
        LOGGER.debug("got the result for named query: qryUpdatePatient, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetCountryCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Country code by country Name")
    public Page<QryGetCountryCodeResponse> executeQryGetCountryCode(@RequestParam(value = "countryName") String countryName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetCountryCode");
        Page<QryGetCountryCodeResponse> _result = queryService.executeQryGetCountryCode(countryName, pageable);
        LOGGER.debug("got the result for named query: qryGetCountryCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetCountryCode")
    @RequestMapping(value = "/queries/qryGetCountryCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetCountryCode(@RequestParam(value = "countryName") String countryName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetCountryCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetCountryCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetCountryCode(countryName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetPatientNoAndRole", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Patient no and role")
    public Page<QryGetPatientNoAndRoleResponse> executeQryGetPatientNoAndRole(@RequestParam(value = "t_userid") String tuserid, @RequestParam(value = "t_pass") String tpass, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPatientNoAndRole");
        Page<QryGetPatientNoAndRoleResponse> _result = queryService.executeQryGetPatientNoAndRole(tuserid, tpass, pageable);
        LOGGER.debug("got the result for named query: qryGetPatientNoAndRole, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPatientNoAndRole")
    @RequestMapping(value = "/queries/qryGetPatientNoAndRole/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPatientNoAndRole(@RequestParam(value = "t_userid") String tuserid, @RequestParam(value = "t_pass") String tpass, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPatientNoAndRole");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPatientNoAndRole";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPatientNoAndRole(tuserid, tpass,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryDeleteptDetailRegByIdno", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "delete saved patient from reg file")
    public IntegerWrapper executeQryDeleteptDetailRegByIdno(@RequestParam(value = "idno") Integer idno, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryDeleteptDetailRegByIdno");
        Integer _result = queryService.executeQryDeleteptDetailRegByIdno(idno);
        LOGGER.debug("got the result for named query: qryDeleteptDetailRegByIdno, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetPatientByPatientNo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Patient by patient No")
    public Page<QryGetPatientByPatientNoResponse> executeQryGetPatientByPatientNo(@RequestParam(value = "t_patientno") String tpatientno, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPatientByPatientNo");
        Page<QryGetPatientByPatientNoResponse> _result = queryService.executeQryGetPatientByPatientNo(tpatientno, pageable);
        LOGGER.debug("got the result for named query: qryGetPatientByPatientNo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPatientByPatientNo")
    @RequestMapping(value = "/queries/qryGetPatientByPatientNo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPatientByPatientNo(@RequestParam(value = "t_patientno") String tpatientno, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPatientByPatientNo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPatientByPatientNo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPatientByPatientNo(tpatientno,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetNextPatientNo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get next patient No")
    public Page<QryGetNextPatientNoResponse> executeQryGetNextPatientNo(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetNextPatientNo");
        Page<QryGetNextPatientNoResponse> _result = queryService.executeQryGetNextPatientNo(pageable);
        LOGGER.debug("got the result for named query: qryGetNextPatientNo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetNextPatientNo")
    @RequestMapping(value = "/queries/qryGetNextPatientNo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetNextPatientNo(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetNextPatientNo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetNextPatientNo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetNextPatientNo( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryUpdateNextPtGenCode", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update next generated code for patient")
    public IntegerWrapper executeQryUpdateNextPtGenCode(@Valid @RequestBody QryUpdateNextPtGenCodeRequest qryUpdateNextPtGenCodeRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdateNextPtGenCode");
        Integer _result = queryService.executeQryUpdateNextPtGenCode(qryUpdateNextPtGenCodeRequest);
        LOGGER.debug("got the result for named query: qryUpdateNextPtGenCode, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryUpdatePatientNo", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update patient number to login table")
    public IntegerWrapper executeQryUpdatePatientNo(@Valid @RequestBody QryUpdatePatientNoRequest qryUpdatePatientNoRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryUpdatePatientNo");
        Integer _result = queryService.executeQryUpdatePatientNo(qryUpdatePatientNoRequest);
        LOGGER.debug("got the result for named query: qryUpdatePatientNo, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryInsertPatientDetails", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert patient details to ptdetail")
    public IntegerWrapper executeQryInsertPatientDetails(@Valid @RequestBody QryInsertPatientDetailsRequest qryInsertPatientDetailsRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryInsertPatientDetails");
        Integer _result = queryService.executeQryInsertPatientDetails(qryInsertPatientDetailsRequest);
        LOGGER.debug("got the result for named query: qryInsertPatientDetails, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/qryGetUserAuth", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "User Auth")
    public Page<QryGetUserAuthResponse> executeQryGetUserAuth(@RequestParam(value = "t_userid") String tuserid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetUserAuth");
        Page<QryGetUserAuthResponse> _result = queryService.executeQryGetUserAuth(tuserid, pageable);
        LOGGER.debug("got the result for named query: qryGetUserAuth, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetUserAuth")
    @RequestMapping(value = "/queries/qryGetUserAuth/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetUserAuth(@RequestParam(value = "t_userid") String tuserid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetUserAuth");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetUserAuth";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetUserAuth(tuserid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetReferralSrc", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get referral source")
    public Page<QryGetReferralSrcResponse> executeQryGetReferralSrc(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetReferralSrc");
        Page<QryGetReferralSrcResponse> _result = queryService.executeQryGetReferralSrc(pageable);
        LOGGER.debug("got the result for named query: qryGetReferralSrc, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetReferralSrc")
    @RequestMapping(value = "/queries/qryGetReferralSrc/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetReferralSrc(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetReferralSrc");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetReferralSrc";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetReferralSrc( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetVerifiedPatients", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get verified patients")
    public Page<QryGetVerifiedPatientsResponse> executeQryGetVerifiedPatients(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetVerifiedPatients");
        Page<QryGetVerifiedPatientsResponse> _result = queryService.executeQryGetVerifiedPatients(pageable);
        LOGGER.debug("got the result for named query: qryGetVerifiedPatients, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetVerifiedPatients")
    @RequestMapping(value = "/queries/qryGetVerifiedPatients/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetVerifiedPatients(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetVerifiedPatients");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetVerifiedPatients";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetVerifiedPatients( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}