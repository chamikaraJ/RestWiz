/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.cwmwsql.PtdetailFieldData;


/**
 * ServiceImpl object for domain model class PtdetailFieldData.
 *
 * @see PtdetailFieldData
 */
@Service("CWmwSQL.PtdetailFieldDataService")
@Validated
public class PtdetailFieldDataServiceImpl implements PtdetailFieldDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtdetailFieldDataServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.PtdetailFieldDataDao")
    private WMGenericDao<PtdetailFieldData, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PtdetailFieldData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailFieldData create(PtdetailFieldData ptdetailFieldData) {
        LOGGER.debug("Creating a new PtdetailFieldData with information: {}", ptdetailFieldData);

        PtdetailFieldData ptdetailFieldDataCreated = this.wmGenericDao.create(ptdetailFieldData);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ptdetailFieldDataCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailFieldData getById(Integer ptdetailfielddataId) {
        LOGGER.debug("Finding PtdetailFieldData by id: {}", ptdetailfielddataId);
        return this.wmGenericDao.findById(ptdetailfielddataId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailFieldData findById(Integer ptdetailfielddataId) {
        LOGGER.debug("Finding PtdetailFieldData by id: {}", ptdetailfielddataId);
        try {
            return this.wmGenericDao.findById(ptdetailfielddataId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PtdetailFieldData found with id: {}", ptdetailfielddataId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<PtdetailFieldData> findByMultipleIds(List<Integer> ptdetailfielddataIds, boolean orderedReturn) {
        LOGGER.debug("Finding PtdetailFieldDatas by ids: {}", ptdetailfielddataIds);

        return this.wmGenericDao.findByMultipleIds(ptdetailfielddataIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailFieldData update(PtdetailFieldData ptdetailFieldData) {
        LOGGER.debug("Updating PtdetailFieldData with information: {}", ptdetailFieldData);

        this.wmGenericDao.update(ptdetailFieldData);
        this.wmGenericDao.refresh(ptdetailFieldData);

        return ptdetailFieldData;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailFieldData delete(Integer ptdetailfielddataId) {
        LOGGER.debug("Deleting PtdetailFieldData with id: {}", ptdetailfielddataId);
        PtdetailFieldData deleted = this.wmGenericDao.findById(ptdetailfielddataId);
        if (deleted == null) {
            LOGGER.debug("No PtdetailFieldData found with id: {}", ptdetailfielddataId);
            throw new EntityNotFoundException(String.valueOf(ptdetailfielddataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(PtdetailFieldData ptdetailFieldData) {
        LOGGER.debug("Deleting PtdetailFieldData with {}", ptdetailFieldData);
        this.wmGenericDao.delete(ptdetailFieldData);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<PtdetailFieldData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PtdetailFieldDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<PtdetailFieldData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PtdetailFieldDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table PtdetailFieldData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table PtdetailFieldData to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}