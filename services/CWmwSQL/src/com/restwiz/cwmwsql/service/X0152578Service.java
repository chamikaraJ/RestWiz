/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.cwmwsql.X0152578;

/**
 * Service object for domain model class {@link X0152578}.
 */
public interface X0152578Service {

    /**
     * Creates a new X0152578. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on X0152578 if any.
     *
     * @param x0152578 Details of the X0152578 to be created; value cannot be null.
     * @return The newly created X0152578.
     */
    X0152578 create(@Valid X0152578 x0152578);


	/**
     * Returns X0152578 by given id if exists.
     *
     * @param x0152578Id The id of the X0152578 to get; value cannot be null.
     * @return X0152578 associated with the given x0152578Id.
	 * @throws EntityNotFoundException If no X0152578 is found.
     */
    X0152578 getById(Integer x0152578Id);

    /**
     * Find and return the X0152578 by given id if exists, returns null otherwise.
     *
     * @param x0152578Id The id of the X0152578 to get; value cannot be null.
     * @return X0152578 associated with the given x0152578Id.
     */
    X0152578 findById(Integer x0152578Id);

	/**
     * Find and return the list of X0152578s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param x0152578Ids The id's of the X0152578 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return X0152578s associated with the given x0152578Ids.
     */
    List<X0152578> findByMultipleIds(List<Integer> x0152578Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing X0152578. It replaces all fields of the existing X0152578 with the given x0152578.
     *
     * This method overrides the input field values using Server side or database managed properties defined on X0152578 if any.
     *
     * @param x0152578 The details of the X0152578 to be updated; value cannot be null.
     * @return The updated X0152578.
     * @throws EntityNotFoundException if no X0152578 is found with given input.
     */
    X0152578 update(@Valid X0152578 x0152578);

    /**
     * Deletes an existing X0152578 with the given id.
     *
     * @param x0152578Id The id of the X0152578 to be deleted; value cannot be null.
     * @return The deleted X0152578.
     * @throws EntityNotFoundException if no X0152578 found with the given id.
     */
    X0152578 delete(Integer x0152578Id);

    /**
     * Deletes an existing X0152578 with the given object.
     *
     * @param x0152578 The instance of the X0152578 to be deleted; value cannot be null.
     */
    void delete(X0152578 x0152578);

    /**
     * Find all X0152578s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching X0152578s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<X0152578> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all X0152578s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching X0152578s.
     *
     * @see Pageable
     * @see Page
     */
    Page<X0152578> findAll(String query, Pageable pageable);

    /**
     * Exports all X0152578s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all X0152578s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the X0152578s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the X0152578.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}