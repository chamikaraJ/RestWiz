/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.cwmwsql.PtdetailReg;


/**
 * ServiceImpl object for domain model class PtdetailReg.
 *
 * @see PtdetailReg
 */
@Service("CWmwSQL.PtdetailRegService")
@Validated
public class PtdetailRegServiceImpl implements PtdetailRegService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtdetailRegServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.PtdetailRegDao")
    private WMGenericDao<PtdetailReg, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PtdetailReg, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailReg create(PtdetailReg ptdetailReg) {
        LOGGER.debug("Creating a new PtdetailReg with information: {}", ptdetailReg);

        PtdetailReg ptdetailRegCreated = this.wmGenericDao.create(ptdetailReg);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ptdetailRegCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailReg getById(Integer ptdetailregId) {
        LOGGER.debug("Finding PtdetailReg by id: {}", ptdetailregId);
        return this.wmGenericDao.findById(ptdetailregId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailReg findById(Integer ptdetailregId) {
        LOGGER.debug("Finding PtdetailReg by id: {}", ptdetailregId);
        try {
            return this.wmGenericDao.findById(ptdetailregId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PtdetailReg found with id: {}", ptdetailregId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<PtdetailReg> findByMultipleIds(List<Integer> ptdetailregIds, boolean orderedReturn) {
        LOGGER.debug("Finding PtdetailRegs by ids: {}", ptdetailregIds);

        return this.wmGenericDao.findByMultipleIds(ptdetailregIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailReg update(PtdetailReg ptdetailReg) {
        LOGGER.debug("Updating PtdetailReg with information: {}", ptdetailReg);

        this.wmGenericDao.update(ptdetailReg);
        this.wmGenericDao.refresh(ptdetailReg);

        return ptdetailReg;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public PtdetailReg delete(Integer ptdetailregId) {
        LOGGER.debug("Deleting PtdetailReg with id: {}", ptdetailregId);
        PtdetailReg deleted = this.wmGenericDao.findById(ptdetailregId);
        if (deleted == null) {
            LOGGER.debug("No PtdetailReg found with id: {}", ptdetailregId);
            throw new EntityNotFoundException(String.valueOf(ptdetailregId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(PtdetailReg ptdetailReg) {
        LOGGER.debug("Deleting PtdetailReg with {}", ptdetailReg);
        this.wmGenericDao.delete(ptdetailReg);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<PtdetailReg> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PtdetailRegs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<PtdetailReg> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PtdetailRegs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table PtdetailReg to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table PtdetailReg to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}