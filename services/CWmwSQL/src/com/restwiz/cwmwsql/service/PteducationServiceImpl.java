/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.cwmwsql.Pteducation;


/**
 * ServiceImpl object for domain model class Pteducation.
 *
 * @see Pteducation
 */
@Service("CWmwSQL.PteducationService")
@Validated
public class PteducationServiceImpl implements PteducationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PteducationServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.PteducationDao")
    private WMGenericDao<Pteducation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Pteducation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Pteducation create(Pteducation pteducation) {
        LOGGER.debug("Creating a new Pteducation with information: {}", pteducation);

        Pteducation pteducationCreated = this.wmGenericDao.create(pteducation);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(pteducationCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Pteducation getById(Integer pteducationId) {
        LOGGER.debug("Finding Pteducation by id: {}", pteducationId);
        return this.wmGenericDao.findById(pteducationId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Pteducation findById(Integer pteducationId) {
        LOGGER.debug("Finding Pteducation by id: {}", pteducationId);
        try {
            return this.wmGenericDao.findById(pteducationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Pteducation found with id: {}", pteducationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Pteducation> findByMultipleIds(List<Integer> pteducationIds, boolean orderedReturn) {
        LOGGER.debug("Finding Pteducations by ids: {}", pteducationIds);

        return this.wmGenericDao.findByMultipleIds(pteducationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Pteducation update(Pteducation pteducation) {
        LOGGER.debug("Updating Pteducation with information: {}", pteducation);

        this.wmGenericDao.update(pteducation);
        this.wmGenericDao.refresh(pteducation);

        return pteducation;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Pteducation delete(Integer pteducationId) {
        LOGGER.debug("Deleting Pteducation with id: {}", pteducationId);
        Pteducation deleted = this.wmGenericDao.findById(pteducationId);
        if (deleted == null) {
            LOGGER.debug("No Pteducation found with id: {}", pteducationId);
            throw new EntityNotFoundException(String.valueOf(pteducationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Pteducation pteducation) {
        LOGGER.debug("Deleting Pteducation with {}", pteducation);
        this.wmGenericDao.delete(pteducation);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Pteducation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Pteducations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Pteducation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Pteducations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Pteducation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Pteducation to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}