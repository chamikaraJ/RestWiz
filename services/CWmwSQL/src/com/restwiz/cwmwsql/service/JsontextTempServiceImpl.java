/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.cwmwsql.JsontextTemp;


/**
 * ServiceImpl object for domain model class JsontextTemp.
 *
 * @see JsontextTemp
 */
@Service("CWmwSQL.JsontextTempService")
@Validated
public class JsontextTempServiceImpl implements JsontextTempService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JsontextTempServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.JsontextTempDao")
    private WMGenericDao<JsontextTemp, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JsontextTemp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public JsontextTemp create(JsontextTemp jsontextTemp) {
        LOGGER.debug("Creating a new JsontextTemp with information: {}", jsontextTemp);

        JsontextTemp jsontextTempCreated = this.wmGenericDao.create(jsontextTemp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(jsontextTempCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public JsontextTemp getById(Integer jsontexttempId) {
        LOGGER.debug("Finding JsontextTemp by id: {}", jsontexttempId);
        return this.wmGenericDao.findById(jsontexttempId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public JsontextTemp findById(Integer jsontexttempId) {
        LOGGER.debug("Finding JsontextTemp by id: {}", jsontexttempId);
        try {
            return this.wmGenericDao.findById(jsontexttempId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No JsontextTemp found with id: {}", jsontexttempId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<JsontextTemp> findByMultipleIds(List<Integer> jsontexttempIds, boolean orderedReturn) {
        LOGGER.debug("Finding JsontextTemps by ids: {}", jsontexttempIds);

        return this.wmGenericDao.findByMultipleIds(jsontexttempIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public JsontextTemp update(JsontextTemp jsontextTemp) {
        LOGGER.debug("Updating JsontextTemp with information: {}", jsontextTemp);

        this.wmGenericDao.update(jsontextTemp);
        this.wmGenericDao.refresh(jsontextTemp);

        return jsontextTemp;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public JsontextTemp delete(Integer jsontexttempId) {
        LOGGER.debug("Deleting JsontextTemp with id: {}", jsontexttempId);
        JsontextTemp deleted = this.wmGenericDao.findById(jsontexttempId);
        if (deleted == null) {
            LOGGER.debug("No JsontextTemp found with id: {}", jsontexttempId);
            throw new EntityNotFoundException(String.valueOf(jsontexttempId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(JsontextTemp jsontextTemp) {
        LOGGER.debug("Deleting JsontextTemp with {}", jsontextTemp);
        this.wmGenericDao.delete(jsontextTemp);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<JsontextTemp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JsontextTemps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<JsontextTemp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JsontextTemps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table JsontextTemp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table JsontextTemp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}