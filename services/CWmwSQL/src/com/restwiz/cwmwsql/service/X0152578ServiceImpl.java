/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.cwmwsql.X0152578;


/**
 * ServiceImpl object for domain model class X0152578.
 *
 * @see X0152578
 */
@Service("CWmwSQL.X0152578Service")
@Validated
public class X0152578ServiceImpl implements X0152578Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(X0152578ServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.X0152578Dao")
    private WMGenericDao<X0152578, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<X0152578, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public X0152578 create(X0152578 x0152578) {
        LOGGER.debug("Creating a new X0152578 with information: {}", x0152578);

        X0152578 x0152578Created = this.wmGenericDao.create(x0152578);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(x0152578Created);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public X0152578 getById(Integer x0152578Id) {
        LOGGER.debug("Finding X0152578 by id: {}", x0152578Id);
        return this.wmGenericDao.findById(x0152578Id);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public X0152578 findById(Integer x0152578Id) {
        LOGGER.debug("Finding X0152578 by id: {}", x0152578Id);
        try {
            return this.wmGenericDao.findById(x0152578Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No X0152578 found with id: {}", x0152578Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<X0152578> findByMultipleIds(List<Integer> x0152578Ids, boolean orderedReturn) {
        LOGGER.debug("Finding X0152578s by ids: {}", x0152578Ids);

        return this.wmGenericDao.findByMultipleIds(x0152578Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public X0152578 update(X0152578 x0152578) {
        LOGGER.debug("Updating X0152578 with information: {}", x0152578);

        this.wmGenericDao.update(x0152578);
        this.wmGenericDao.refresh(x0152578);

        return x0152578;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public X0152578 delete(Integer x0152578Id) {
        LOGGER.debug("Deleting X0152578 with id: {}", x0152578Id);
        X0152578 deleted = this.wmGenericDao.findById(x0152578Id);
        if (deleted == null) {
            LOGGER.debug("No X0152578 found with id: {}", x0152578Id);
            throw new EntityNotFoundException(String.valueOf(x0152578Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(X0152578 x0152578) {
        LOGGER.debug("Deleting X0152578 with {}", x0152578);
        this.wmGenericDao.delete(x0152578);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<X0152578> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all X0152578s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<X0152578> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all X0152578s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table X0152578 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table X0152578 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}