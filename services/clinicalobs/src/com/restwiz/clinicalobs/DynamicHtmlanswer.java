/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * DynamicHtmlanswer generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`DynamicHTMLAnswer`")
public class DynamicHtmlanswer implements Serializable {

    private Integer idno;
    private String answer;
    private Timestamp answeredDateTime;
    private String doneBy;
    private Integer dymanicDataHtmlid;
    private Integer obsptid;
    private Obspatients obspatients;
    private DynamicDataForHtml dynamicDataForHtml;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`idno`", nullable = false, scale = 0, precision = 10)
    public Integer getIdno() {
        return this.idno;
    }

    public void setIdno(Integer idno) {
        this.idno = idno;
    }

    @Column(name = "`answer`", nullable = true, length = 255)
    public String getAnswer() {
        return this.answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    @Column(name = "`answeredDateTime`", nullable = false)
    public Timestamp getAnsweredDateTime() {
        return this.answeredDateTime;
    }

    public void setAnsweredDateTime(Timestamp answeredDateTime) {
        this.answeredDateTime = answeredDateTime;
    }

    @Column(name = "`doneBy`", nullable = true, length = 255)
    public String getDoneBy() {
        return this.doneBy;
    }

    public void setDoneBy(String doneBy) {
        this.doneBy = doneBy;
    }

    @Column(name = "`dymanicDataHTMLid`", nullable = true, scale = 0, precision = 10)
    public Integer getDymanicDataHtmlid() {
        return this.dymanicDataHtmlid;
    }

    public void setDymanicDataHtmlid(Integer dymanicDataHtmlid) {
        this.dymanicDataHtmlid = dymanicDataHtmlid;
    }

    @Column(name = "`obsptid`", nullable = true, scale = 0, precision = 10)
    public Integer getObsptid() {
        return this.obsptid;
    }

    public void setObsptid(Integer obsptid) {
        this.obsptid = obsptid;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`obsptid`", referencedColumnName = "`obsptid`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_DynamicHTMLAnswer_TO_vfdzP`"))
    @Fetch(FetchMode.JOIN)
    public Obspatients getObspatients() {
        return this.obspatients;
    }

    public void setObspatients(Obspatients obspatients) {
        if(obspatients != null) {
            this.obsptid = obspatients.getObsptid();
        }

        this.obspatients = obspatients;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`dymanicDataHTMLid`", referencedColumnName = "`idno`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_DynamicHTMLAnswer_TO_mfUWQ`"))
    @Fetch(FetchMode.JOIN)
    public DynamicDataForHtml getDynamicDataForHtml() {
        return this.dynamicDataForHtml;
    }

    public void setDynamicDataForHtml(DynamicDataForHtml dynamicDataForHtml) {
        if(dynamicDataForHtml != null) {
            this.dymanicDataHtmlid = dynamicDataForHtml.getIdno();
        }

        this.dynamicDataForHtml = dynamicDataForHtml;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DynamicHtmlanswer)) return false;
        final DynamicHtmlanswer dynamicHtmlanswer = (DynamicHtmlanswer) o;
        return Objects.equals(getIdno(), dynamicHtmlanswer.getIdno());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdno());
    }
}