/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Time;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.Testtime;
import com.restwiz.clinicalobs.TesttimeId;
import com.restwiz.clinicalobs.service.TesttimeService;


/**
 * Controller object for domain model class Testtime.
 * @see Testtime
 */
@RestController("clinicalobs.TesttimeController")
@Api(value = "TesttimeController", description = "Exposes APIs to work with Testtime resource.")
@RequestMapping("/clinicalobs/Testtime")
public class TesttimeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TesttimeController.class);

    @Autowired
	@Qualifier("clinicalobs.TesttimeService")
	private TesttimeService testtimeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Testtime instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testtime createTesttime(@RequestBody Testtime testtime) {
		LOGGER.debug("Create Testtime with information: {}" , testtime);

		testtime = testtimeService.create(testtime);
		LOGGER.debug("Created Testtime with information: {}" , testtime);

	    return testtime;
	}

    @ApiOperation(value = "Returns the Testtime instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testtime getTesttime(@RequestParam("time") Time time, @RequestParam("name") String name) {

        TesttimeId testtimeId = new TesttimeId();
        testtimeId.setTime(time);
        testtimeId.setName(name);

        LOGGER.debug("Getting Testtime with id: {}" , testtimeId);
        Testtime testtime = testtimeService.getById(testtimeId);
        LOGGER.debug("Testtime details with id: {}" , testtime);

        return testtime;
    }



    @ApiOperation(value = "Updates the Testtime instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testtime editTesttime(@RequestParam("time") Time time, @RequestParam("name") String name, @RequestBody Testtime testtime) {

        testtime.setTime(time);
        testtime.setName(name);

        LOGGER.debug("Testtime details with id is updated with: {}" , testtime);

        return testtimeService.update(testtime);
    }


    @ApiOperation(value = "Deletes the Testtime instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTesttime(@RequestParam("time") Time time, @RequestParam("name") String name) {

        TesttimeId testtimeId = new TesttimeId();
        testtimeId.setTime(time);
        testtimeId.setName(name);

        LOGGER.debug("Deleting Testtime with id: {}" , testtimeId);
        Testtime testtime = testtimeService.delete(testtimeId);

        return testtime != null;
    }


    /**
     * @deprecated Use {@link #findTesttimes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testtime instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testtime> searchTesttimesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testtimes list by query filter:{}", (Object) queryFilters);
        return testtimeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testtime instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testtime> findTesttimes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testtimes list by filter:", query);
        return testtimeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testtime instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testtime> filterTesttimes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testtimes list by filter", query);
        return testtimeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTesttimes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testtimeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTesttimesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Testtime.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> testtimeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Testtime instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTesttimes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Testtimes");
		return testtimeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTesttimeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testtimeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TesttimeService instance
	 */
	protected void setTesttimeService(TesttimeService service) {
		this.testtimeService = service;
	}

}