/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.Refpositioningaids;
import com.restwiz.clinicalobs.service.RefpositioningaidsService;


/**
 * Controller object for domain model class Refpositioningaids.
 * @see Refpositioningaids
 */
@RestController("clinicalobs.RefpositioningaidsController")
@Api(value = "RefpositioningaidsController", description = "Exposes APIs to work with Refpositioningaids resource.")
@RequestMapping("/clinicalobs/Refpositioningaids")
public class RefpositioningaidsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefpositioningaidsController.class);

    @Autowired
	@Qualifier("clinicalobs.RefpositioningaidsService")
	private RefpositioningaidsService refpositioningaidsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Refpositioningaids instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refpositioningaids createRefpositioningaids(@RequestBody Refpositioningaids refpositioningaids) {
		LOGGER.debug("Create Refpositioningaids with information: {}" , refpositioningaids);

		refpositioningaids = refpositioningaidsService.create(refpositioningaids);
		LOGGER.debug("Created Refpositioningaids with information: {}" , refpositioningaids);

	    return refpositioningaids;
	}

    @ApiOperation(value = "Returns the Refpositioningaids instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refpositioningaids getRefpositioningaids(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Refpositioningaids with id: {}" , id);

        Refpositioningaids foundRefpositioningaids = refpositioningaidsService.getById(id);
        LOGGER.debug("Refpositioningaids details with id: {}" , foundRefpositioningaids);

        return foundRefpositioningaids;
    }

    @ApiOperation(value = "Updates the Refpositioningaids instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refpositioningaids editRefpositioningaids(@PathVariable("id") Integer id, @RequestBody Refpositioningaids refpositioningaids) {
        LOGGER.debug("Editing Refpositioningaids with id: {}" , refpositioningaids.getIdno());

        refpositioningaids.setIdno(id);
        refpositioningaids = refpositioningaidsService.update(refpositioningaids);
        LOGGER.debug("Refpositioningaids details with id: {}" , refpositioningaids);

        return refpositioningaids;
    }

    @ApiOperation(value = "Deletes the Refpositioningaids instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefpositioningaids(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Refpositioningaids with id: {}" , id);

        Refpositioningaids deletedRefpositioningaids = refpositioningaidsService.delete(id);

        return deletedRefpositioningaids != null;
    }

    /**
     * @deprecated Use {@link #findRefpositioningaids(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Refpositioningaids instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refpositioningaids> searchRefpositioningaidsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Refpositioningaids list by query filter:{}", (Object) queryFilters);
        return refpositioningaidsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Refpositioningaids instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refpositioningaids> findRefpositioningaids(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Refpositioningaids list by filter:", query);
        return refpositioningaidsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Refpositioningaids instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refpositioningaids> filterRefpositioningaids(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Refpositioningaids list by filter", query);
        return refpositioningaidsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefpositioningaids(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refpositioningaidsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRefpositioningaidsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Refpositioningaids.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> refpositioningaidsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Refpositioningaids instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefpositioningaids( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Refpositioningaids");
		return refpositioningaidsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefpositioningaidsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refpositioningaidsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefpositioningaidsService instance
	 */
	protected void setRefpositioningaidsService(RefpositioningaidsService service) {
		this.refpositioningaidsService = service;
	}

}