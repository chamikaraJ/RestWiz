/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.SelectedObsFields;
import com.restwiz.clinicalobs.service.SelectedObsFieldsService;


/**
 * Controller object for domain model class SelectedObsFields.
 * @see SelectedObsFields
 */
@RestController("clinicalobs.SelectedObsFieldsController")
@Api(value = "SelectedObsFieldsController", description = "Exposes APIs to work with SelectedObsFields resource.")
@RequestMapping("/clinicalobs/SelectedObsFields")
public class SelectedObsFieldsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SelectedObsFieldsController.class);

    @Autowired
	@Qualifier("clinicalobs.SelectedObsFieldsService")
	private SelectedObsFieldsService selectedObsFieldsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SelectedObsFields instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SelectedObsFields createSelectedObsFields(@RequestBody SelectedObsFields selectedObsFields) {
		LOGGER.debug("Create SelectedObsFields with information: {}" , selectedObsFields);

		selectedObsFields = selectedObsFieldsService.create(selectedObsFields);
		LOGGER.debug("Created SelectedObsFields with information: {}" , selectedObsFields);

	    return selectedObsFields;
	}

    @ApiOperation(value = "Returns the SelectedObsFields instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SelectedObsFields getSelectedObsFields(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SelectedObsFields with id: {}" , id);

        SelectedObsFields foundSelectedObsFields = selectedObsFieldsService.getById(id);
        LOGGER.debug("SelectedObsFields details with id: {}" , foundSelectedObsFields);

        return foundSelectedObsFields;
    }

    @ApiOperation(value = "Updates the SelectedObsFields instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SelectedObsFields editSelectedObsFields(@PathVariable("id") Integer id, @RequestBody SelectedObsFields selectedObsFields) {
        LOGGER.debug("Editing SelectedObsFields with id: {}" , selectedObsFields.getIdno());

        selectedObsFields.setIdno(id);
        selectedObsFields = selectedObsFieldsService.update(selectedObsFields);
        LOGGER.debug("SelectedObsFields details with id: {}" , selectedObsFields);

        return selectedObsFields;
    }

    @ApiOperation(value = "Deletes the SelectedObsFields instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSelectedObsFields(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SelectedObsFields with id: {}" , id);

        SelectedObsFields deletedSelectedObsFields = selectedObsFieldsService.delete(id);

        return deletedSelectedObsFields != null;
    }

    /**
     * @deprecated Use {@link #findSelectedObsFields(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SelectedObsFields instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SelectedObsFields> searchSelectedObsFieldsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SelectedObsFields list by query filter:{}", (Object) queryFilters);
        return selectedObsFieldsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SelectedObsFields instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SelectedObsFields> findSelectedObsFields(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SelectedObsFields list by filter:", query);
        return selectedObsFieldsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SelectedObsFields instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SelectedObsFields> filterSelectedObsFields(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SelectedObsFields list by filter", query);
        return selectedObsFieldsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSelectedObsFields(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return selectedObsFieldsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSelectedObsFieldsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SelectedObsFields.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> selectedObsFieldsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SelectedObsFields instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSelectedObsFields( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SelectedObsFields");
		return selectedObsFieldsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSelectedObsFieldsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return selectedObsFieldsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SelectedObsFieldsService instance
	 */
	protected void setSelectedObsFieldsService(SelectedObsFieldsService service) {
		this.selectedObsFieldsService = service;
	}

}