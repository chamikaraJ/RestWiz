/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.DynamicMetaData;
import com.restwiz.clinicalobs.Qcategory;
import com.restwiz.clinicalobs.QsubCategory;
import com.restwiz.clinicalobs.service.QcategoryService;


/**
 * Controller object for domain model class Qcategory.
 * @see Qcategory
 */
@RestController("clinicalobs.QcategoryController")
@Api(value = "QcategoryController", description = "Exposes APIs to work with Qcategory resource.")
@RequestMapping("/clinicalobs/Qcategory")
public class QcategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QcategoryController.class);

    @Autowired
	@Qualifier("clinicalobs.QcategoryService")
	private QcategoryService qcategoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Qcategory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Qcategory createQcategory(@RequestBody Qcategory qcategory) {
		LOGGER.debug("Create Qcategory with information: {}" , qcategory);

		qcategory = qcategoryService.create(qcategory);
		LOGGER.debug("Created Qcategory with information: {}" , qcategory);

	    return qcategory;
	}

    @ApiOperation(value = "Returns the Qcategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Qcategory getQcategory(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Qcategory with id: {}" , id);

        Qcategory foundQcategory = qcategoryService.getById(id);
        LOGGER.debug("Qcategory details with id: {}" , foundQcategory);

        return foundQcategory;
    }

    @ApiOperation(value = "Updates the Qcategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Qcategory editQcategory(@PathVariable("id") Integer id, @RequestBody Qcategory qcategory) {
        LOGGER.debug("Editing Qcategory with id: {}" , qcategory.getId());

        qcategory.setId(id);
        qcategory = qcategoryService.update(qcategory);
        LOGGER.debug("Qcategory details with id: {}" , qcategory);

        return qcategory;
    }

    @ApiOperation(value = "Deletes the Qcategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQcategory(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Qcategory with id: {}" , id);

        Qcategory deletedQcategory = qcategoryService.delete(id);

        return deletedQcategory != null;
    }

    /**
     * @deprecated Use {@link #findQcategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Qcategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Qcategory> searchQcategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Qcategories list by query filter:{}", (Object) queryFilters);
        return qcategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Qcategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Qcategory> findQcategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Qcategories list by filter:", query);
        return qcategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Qcategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Qcategory> filterQcategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Qcategories list by filter", query);
        return qcategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportQcategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qcategoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQcategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Qcategory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qcategoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Qcategory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countQcategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Qcategories");
		return qcategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getQcategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qcategoryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/qsubCategories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the qsubCategories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QsubCategory> findAssociatedQsubCategories(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated qsubCategories");
        return qcategoryService.findAssociatedQsubCategories(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/dynamicMetaDatas", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the dynamicMetaDatas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DynamicMetaData> findAssociatedDynamicMetaDatas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated dynamicMetaDatas");
        return qcategoryService.findAssociatedDynamicMetaDatas(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QcategoryService instance
	 */
	protected void setQcategoryService(QcategoryService service) {
		this.qcategoryService = service;
	}

}