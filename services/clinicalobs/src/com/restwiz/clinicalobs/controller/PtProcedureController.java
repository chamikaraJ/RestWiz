/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.PtProcedure;
import com.restwiz.clinicalobs.service.PtProcedureService;


/**
 * Controller object for domain model class PtProcedure.
 * @see PtProcedure
 */
@RestController("clinicalobs.PtProcedureController")
@Api(value = "PtProcedureController", description = "Exposes APIs to work with PtProcedure resource.")
@RequestMapping("/clinicalobs/PtProcedure")
public class PtProcedureController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtProcedureController.class);

    @Autowired
	@Qualifier("clinicalobs.PtProcedureService")
	private PtProcedureService ptProcedureService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PtProcedure instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtProcedure createPtProcedure(@RequestBody PtProcedure ptProcedure) {
		LOGGER.debug("Create PtProcedure with information: {}" , ptProcedure);

		ptProcedure = ptProcedureService.create(ptProcedure);
		LOGGER.debug("Created PtProcedure with information: {}" , ptProcedure);

	    return ptProcedure;
	}

    @ApiOperation(value = "Returns the PtProcedure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtProcedure getPtProcedure(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PtProcedure with id: {}" , id);

        PtProcedure foundPtProcedure = ptProcedureService.getById(id);
        LOGGER.debug("PtProcedure details with id: {}" , foundPtProcedure);

        return foundPtProcedure;
    }

    @ApiOperation(value = "Updates the PtProcedure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtProcedure editPtProcedure(@PathVariable("id") Integer id, @RequestBody PtProcedure ptProcedure) {
        LOGGER.debug("Editing PtProcedure with id: {}" , ptProcedure.getIdno());

        ptProcedure.setIdno(id);
        ptProcedure = ptProcedureService.update(ptProcedure);
        LOGGER.debug("PtProcedure details with id: {}" , ptProcedure);

        return ptProcedure;
    }

    @ApiOperation(value = "Deletes the PtProcedure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePtProcedure(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PtProcedure with id: {}" , id);

        PtProcedure deletedPtProcedure = ptProcedureService.delete(id);

        return deletedPtProcedure != null;
    }

    /**
     * @deprecated Use {@link #findPtProcedures(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PtProcedure instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtProcedure> searchPtProceduresByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PtProcedures list by query filter:{}", (Object) queryFilters);
        return ptProcedureService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PtProcedure instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtProcedure> findPtProcedures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PtProcedures list by filter:", query);
        return ptProcedureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PtProcedure instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtProcedure> filterPtProcedures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PtProcedures list by filter", query);
        return ptProcedureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPtProcedures(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return ptProcedureService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPtProceduresAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PtProcedure.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> ptProcedureService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PtProcedure instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPtProcedures( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PtProcedures");
		return ptProcedureService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPtProcedureAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return ptProcedureService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PtProcedureService instance
	 */
	protected void setPtProcedureService(PtProcedureService service) {
		this.ptProcedureService = service;
	}

}