/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.Admission;
import com.restwiz.clinicalobs.Anaesthetic;
import com.restwiz.clinicalobs.AnaestheticIvdrug;
import com.restwiz.clinicalobs.AnaestheticIvfluid;
import com.restwiz.clinicalobs.AnaestheticRecord;
import com.restwiz.clinicalobs.Dischargeassessment;
import com.restwiz.clinicalobs.DynamicHtmlanswer;
import com.restwiz.clinicalobs.DynamicQandA;
import com.restwiz.clinicalobs.Events;
import com.restwiz.clinicalobs.Obs;
import com.restwiz.clinicalobs.Obspatients;
import com.restwiz.clinicalobs.ObsptStatus;
import com.restwiz.clinicalobs.Procedureassessment;
import com.restwiz.clinicalobs.Proceduremedications;
import com.restwiz.clinicalobs.PtAlert;
import com.restwiz.clinicalobs.PtAllergy;
import com.restwiz.clinicalobs.PtDocument;
import com.restwiz.clinicalobs.PtProcedure;
import com.restwiz.clinicalobs.Recovery;
import com.restwiz.clinicalobs.Surgchecklist;
import com.restwiz.clinicalobs.service.ObspatientsService;


/**
 * Controller object for domain model class Obspatients.
 * @see Obspatients
 */
@RestController("clinicalobs.ObspatientsController")
@Api(value = "ObspatientsController", description = "Exposes APIs to work with Obspatients resource.")
@RequestMapping("/clinicalobs/Obspatients")
public class ObspatientsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ObspatientsController.class);

    @Autowired
	@Qualifier("clinicalobs.ObspatientsService")
	private ObspatientsService obspatientsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Obspatients instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Obspatients createObspatients(@RequestPart("wm_data_json") Obspatients obspatients, @RequestPart(value = "picAvarat", required = false) MultipartFile _picAvarat) {
		LOGGER.debug("Create Obspatients with information: {}" , obspatients);

    obspatients.setPicAvarat(WMMultipartUtils.toByteArray(_picAvarat));
		obspatients = obspatientsService.create(obspatients);
		LOGGER.debug("Created Obspatients with information: {}" , obspatients);

	    return obspatients;
	}

    @ApiOperation(value = "Returns the Obspatients instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Obspatients getObspatients(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Obspatients with id: {}" , id);

        Obspatients foundObspatients = obspatientsService.getById(id);
        LOGGER.debug("Obspatients details with id: {}" , foundObspatients);

        return foundObspatients;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Obspatients instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getObspatientsBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Obspatients instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Obspatients.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Obspatients obspatients = obspatientsService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(obspatients, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Obspatients instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Obspatients editObspatients(@PathVariable("id") Integer id, @RequestBody Obspatients obspatients) {
        LOGGER.debug("Editing Obspatients with id: {}" , obspatients.getObsptid());

        obspatients.setObsptid(id);
        obspatients = obspatientsService.update(obspatients);
        LOGGER.debug("Obspatients details with id: {}" , obspatients);

        return obspatients;
    }

    @ApiOperation(value = "Updates the Obspatients instance associated with the given id.This API should be used when Obspatients instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Obspatients editObspatients(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Obspatients newObspatients = WMMultipartUtils.toObject(multipartHttpServletRequest, Obspatients.class, "clinicalobs");
        newObspatients.setObsptid(id);

        Obspatients oldObspatients = obspatientsService.getById(id);
        WMMultipartUtils.updateLobsContent(oldObspatients, newObspatients);
        LOGGER.debug("Updating Obspatients with information: {}" , newObspatients);

        return obspatientsService.update(newObspatients);
    }

    @ApiOperation(value = "Deletes the Obspatients instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteObspatients(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Obspatients with id: {}" , id);

        Obspatients deletedObspatients = obspatientsService.delete(id);

        return deletedObspatients != null;
    }

    /**
     * @deprecated Use {@link #findObspatients(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Obspatients instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Obspatients> searchObspatientsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Obspatients list by query filter:{}", (Object) queryFilters);
        return obspatientsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Obspatients instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Obspatients> findObspatients(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Obspatients list by filter:", query);
        return obspatientsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Obspatients instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Obspatients> filterObspatients(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Obspatients list by filter", query);
        return obspatientsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportObspatients(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return obspatientsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportObspatientsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Obspatients.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> obspatientsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Obspatients instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countObspatients( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Obspatients");
		return obspatientsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getObspatientsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return obspatientsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/dynamicHtmlanswers", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the dynamicHtmlanswers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DynamicHtmlanswer> findAssociatedDynamicHtmlanswers(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated dynamicHtmlanswers");
        return obspatientsService.findAssociatedDynamicHtmlanswers(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/obsptStatuses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the obsptStatuses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ObsptStatus> findAssociatedObsptStatuses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated obsptStatuses");
        return obspatientsService.findAssociatedObsptStatuses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/admissions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the admissions instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Admission> findAssociatedAdmissions(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated admissions");
        return obspatientsService.findAssociatedAdmissions(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/anaesthetics", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the anaesthetics instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Anaesthetic> findAssociatedAnaesthetics(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated anaesthetics");
        return obspatientsService.findAssociatedAnaesthetics(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/anaestheticIvdrugs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the anaestheticIvdrugs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnaestheticIvdrug> findAssociatedAnaestheticIvdrugs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated anaestheticIvdrugs");
        return obspatientsService.findAssociatedAnaestheticIvdrugs(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/anaestheticIvfluids", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the anaestheticIvfluids instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnaestheticIvfluid> findAssociatedAnaestheticIvfluids(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated anaestheticIvfluids");
        return obspatientsService.findAssociatedAnaestheticIvfluids(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/anaestheticRecords", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the anaestheticRecords instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnaestheticRecord> findAssociatedAnaestheticRecords(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated anaestheticRecords");
        return obspatientsService.findAssociatedAnaestheticRecords(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/dischargeassessments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the dischargeassessments instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Dischargeassessment> findAssociatedDischargeassessments(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated dischargeassessments");
        return obspatientsService.findAssociatedDischargeassessments(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/dynamicQandAs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the dynamicQandAs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DynamicQandA> findAssociatedDynamicQandAs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated dynamicQandAs");
        return obspatientsService.findAssociatedDynamicQandAs(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/eventses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the eventses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Events> findAssociatedEventses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated eventses");
        return obspatientsService.findAssociatedEventses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/obsesForObsptid", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the obsesForObsptid instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Obs> findAssociatedObsesForObsptid(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated obsesForObsptid");
        return obspatientsService.findAssociatedObsesForObsptid(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/obsesForObsptidRelation", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the obsesForObsptidRelation instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Obs> findAssociatedObsesForObsptidRelation(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated obsesForObsptidRelation");
        return obspatientsService.findAssociatedObsesForObsptidRelation(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/procedureassessments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the procedureassessments instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Procedureassessment> findAssociatedProcedureassessments(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated procedureassessments");
        return obspatientsService.findAssociatedProcedureassessments(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/proceduremedicationses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the proceduremedicationses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Proceduremedications> findAssociatedProceduremedicationses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated proceduremedicationses");
        return obspatientsService.findAssociatedProceduremedicationses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/ptAlerts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the ptAlerts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtAlert> findAssociatedPtAlerts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated ptAlerts");
        return obspatientsService.findAssociatedPtAlerts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/ptAllergies", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the ptAllergies instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtAllergy> findAssociatedPtAllergies(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated ptAllergies");
        return obspatientsService.findAssociatedPtAllergies(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/ptDocuments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the ptDocuments instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtDocument> findAssociatedPtDocuments(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated ptDocuments");
        return obspatientsService.findAssociatedPtDocuments(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/ptProcedures", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the ptProcedures instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtProcedure> findAssociatedPtProcedures(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated ptProcedures");
        return obspatientsService.findAssociatedPtProcedures(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/recoveries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the recoveries instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Recovery> findAssociatedRecoveries(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated recoveries");
        return obspatientsService.findAssociatedRecoveries(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/surgchecklists", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the surgchecklists instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Surgchecklist> findAssociatedSurgchecklists(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated surgchecklists");
        return obspatientsService.findAssociatedSurgchecklists(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ObspatientsService instance
	 */
	protected void setObspatientsService(ObspatientsService service) {
		this.obspatientsService = service;
	}

}