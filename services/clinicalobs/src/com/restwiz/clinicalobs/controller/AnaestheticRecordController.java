/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.AnaestheticIvdrug;
import com.restwiz.clinicalobs.AnaestheticIvfluid;
import com.restwiz.clinicalobs.AnaestheticRecord;
import com.restwiz.clinicalobs.Obs;
import com.restwiz.clinicalobs.service.AnaestheticRecordService;


/**
 * Controller object for domain model class AnaestheticRecord.
 * @see AnaestheticRecord
 */
@RestController("clinicalobs.AnaestheticRecordController")
@Api(value = "AnaestheticRecordController", description = "Exposes APIs to work with AnaestheticRecord resource.")
@RequestMapping("/clinicalobs/AnaestheticRecord")
public class AnaestheticRecordController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnaestheticRecordController.class);

    @Autowired
	@Qualifier("clinicalobs.AnaestheticRecordService")
	private AnaestheticRecordService anaestheticRecordService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AnaestheticRecord instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnaestheticRecord createAnaestheticRecord(@RequestBody AnaestheticRecord anaestheticRecord) {
		LOGGER.debug("Create AnaestheticRecord with information: {}" , anaestheticRecord);

		anaestheticRecord = anaestheticRecordService.create(anaestheticRecord);
		LOGGER.debug("Created AnaestheticRecord with information: {}" , anaestheticRecord);

	    return anaestheticRecord;
	}

    @ApiOperation(value = "Returns the AnaestheticRecord instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnaestheticRecord getAnaestheticRecord(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AnaestheticRecord with id: {}" , id);

        AnaestheticRecord foundAnaestheticRecord = anaestheticRecordService.getById(id);
        LOGGER.debug("AnaestheticRecord details with id: {}" , foundAnaestheticRecord);

        return foundAnaestheticRecord;
    }

    @ApiOperation(value = "Updates the AnaestheticRecord instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnaestheticRecord editAnaestheticRecord(@PathVariable("id") Integer id, @RequestBody AnaestheticRecord anaestheticRecord) {
        LOGGER.debug("Editing AnaestheticRecord with id: {}" , anaestheticRecord.getIdno());

        anaestheticRecord.setIdno(id);
        anaestheticRecord = anaestheticRecordService.update(anaestheticRecord);
        LOGGER.debug("AnaestheticRecord details with id: {}" , anaestheticRecord);

        return anaestheticRecord;
    }

    @ApiOperation(value = "Deletes the AnaestheticRecord instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAnaestheticRecord(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AnaestheticRecord with id: {}" , id);

        AnaestheticRecord deletedAnaestheticRecord = anaestheticRecordService.delete(id);

        return deletedAnaestheticRecord != null;
    }

    /**
     * @deprecated Use {@link #findAnaestheticRecords(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AnaestheticRecord instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnaestheticRecord> searchAnaestheticRecordsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AnaestheticRecords list by query filter:{}", (Object) queryFilters);
        return anaestheticRecordService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AnaestheticRecord instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnaestheticRecord> findAnaestheticRecords(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AnaestheticRecords list by filter:", query);
        return anaestheticRecordService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AnaestheticRecord instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnaestheticRecord> filterAnaestheticRecords(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AnaestheticRecords list by filter", query);
        return anaestheticRecordService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAnaestheticRecords(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return anaestheticRecordService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAnaestheticRecordsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AnaestheticRecord.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> anaestheticRecordService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AnaestheticRecord instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAnaestheticRecords( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AnaestheticRecords");
		return anaestheticRecordService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAnaestheticRecordAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return anaestheticRecordService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/anaestheticIvdrugs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the anaestheticIvdrugs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnaestheticIvdrug> findAssociatedAnaestheticIvdrugs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated anaestheticIvdrugs");
        return anaestheticRecordService.findAssociatedAnaestheticIvdrugs(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/anaestheticIvfluids", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the anaestheticIvfluids instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnaestheticIvfluid> findAssociatedAnaestheticIvfluids(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated anaestheticIvfluids");
        return anaestheticRecordService.findAssociatedAnaestheticIvfluids(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/obses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the obses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Obs> findAssociatedObses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated obses");
        return anaestheticRecordService.findAssociatedObses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AnaestheticRecordService instance
	 */
	protected void setAnaestheticRecordService(AnaestheticRecordService service) {
		this.anaestheticRecordService = service;
	}

}