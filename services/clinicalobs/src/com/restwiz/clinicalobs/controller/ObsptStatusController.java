/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.ObsptStatus;
import com.restwiz.clinicalobs.service.ObsptStatusService;


/**
 * Controller object for domain model class ObsptStatus.
 * @see ObsptStatus
 */
@RestController("clinicalobs.ObsptStatusController")
@Api(value = "ObsptStatusController", description = "Exposes APIs to work with ObsptStatus resource.")
@RequestMapping("/clinicalobs/ObsptStatus")
public class ObsptStatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ObsptStatusController.class);

    @Autowired
	@Qualifier("clinicalobs.ObsptStatusService")
	private ObsptStatusService obsptStatusService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ObsptStatus instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ObsptStatus createObsptStatus(@RequestBody ObsptStatus obsptStatus) {
		LOGGER.debug("Create ObsptStatus with information: {}" , obsptStatus);

		obsptStatus = obsptStatusService.create(obsptStatus);
		LOGGER.debug("Created ObsptStatus with information: {}" , obsptStatus);

	    return obsptStatus;
	}

    @ApiOperation(value = "Returns the ObsptStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ObsptStatus getObsptStatus(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ObsptStatus with id: {}" , id);

        ObsptStatus foundObsptStatus = obsptStatusService.getById(id);
        LOGGER.debug("ObsptStatus details with id: {}" , foundObsptStatus);

        return foundObsptStatus;
    }

    @ApiOperation(value = "Updates the ObsptStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ObsptStatus editObsptStatus(@PathVariable("id") Integer id, @RequestBody ObsptStatus obsptStatus) {
        LOGGER.debug("Editing ObsptStatus with id: {}" , obsptStatus.getIdno());

        obsptStatus.setIdno(id);
        obsptStatus = obsptStatusService.update(obsptStatus);
        LOGGER.debug("ObsptStatus details with id: {}" , obsptStatus);

        return obsptStatus;
    }

    @ApiOperation(value = "Deletes the ObsptStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteObsptStatus(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ObsptStatus with id: {}" , id);

        ObsptStatus deletedObsptStatus = obsptStatusService.delete(id);

        return deletedObsptStatus != null;
    }

    /**
     * @deprecated Use {@link #findObsptStatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ObsptStatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ObsptStatus> searchObsptStatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ObsptStatuses list by query filter:{}", (Object) queryFilters);
        return obsptStatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ObsptStatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ObsptStatus> findObsptStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ObsptStatuses list by filter:", query);
        return obsptStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ObsptStatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ObsptStatus> filterObsptStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ObsptStatuses list by filter", query);
        return obsptStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportObsptStatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return obsptStatusService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportObsptStatusesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ObsptStatus.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> obsptStatusService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ObsptStatus instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countObsptStatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ObsptStatuses");
		return obsptStatusService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getObsptStatusAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return obsptStatusService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/obsptStatusesForFkParentStatus", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the obsptStatusesForFkParentStatus instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ObsptStatus> findAssociatedObsptStatusesForFkParentStatus(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated obsptStatusesForFkParentStatus");
        return obsptStatusService.findAssociatedObsptStatusesForFkParentStatus(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ObsptStatusService instance
	 */
	protected void setObsptStatusService(ObsptStatusService service) {
		this.obsptStatusService = service;
	}

}