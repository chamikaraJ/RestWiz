/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.Refdiathermy;
import com.restwiz.clinicalobs.service.RefdiathermyService;


/**
 * Controller object for domain model class Refdiathermy.
 * @see Refdiathermy
 */
@RestController("clinicalobs.RefdiathermyController")
@Api(value = "RefdiathermyController", description = "Exposes APIs to work with Refdiathermy resource.")
@RequestMapping("/clinicalobs/Refdiathermy")
public class RefdiathermyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefdiathermyController.class);

    @Autowired
	@Qualifier("clinicalobs.RefdiathermyService")
	private RefdiathermyService refdiathermyService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Refdiathermy instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refdiathermy createRefdiathermy(@RequestBody Refdiathermy refdiathermy) {
		LOGGER.debug("Create Refdiathermy with information: {}" , refdiathermy);

		refdiathermy = refdiathermyService.create(refdiathermy);
		LOGGER.debug("Created Refdiathermy with information: {}" , refdiathermy);

	    return refdiathermy;
	}

    @ApiOperation(value = "Returns the Refdiathermy instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refdiathermy getRefdiathermy(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Refdiathermy with id: {}" , id);

        Refdiathermy foundRefdiathermy = refdiathermyService.getById(id);
        LOGGER.debug("Refdiathermy details with id: {}" , foundRefdiathermy);

        return foundRefdiathermy;
    }

    @ApiOperation(value = "Updates the Refdiathermy instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refdiathermy editRefdiathermy(@PathVariable("id") Integer id, @RequestBody Refdiathermy refdiathermy) {
        LOGGER.debug("Editing Refdiathermy with id: {}" , refdiathermy.getIdno());

        refdiathermy.setIdno(id);
        refdiathermy = refdiathermyService.update(refdiathermy);
        LOGGER.debug("Refdiathermy details with id: {}" , refdiathermy);

        return refdiathermy;
    }

    @ApiOperation(value = "Deletes the Refdiathermy instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefdiathermy(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Refdiathermy with id: {}" , id);

        Refdiathermy deletedRefdiathermy = refdiathermyService.delete(id);

        return deletedRefdiathermy != null;
    }

    /**
     * @deprecated Use {@link #findRefdiathermies(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Refdiathermy instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refdiathermy> searchRefdiathermiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Refdiathermies list by query filter:{}", (Object) queryFilters);
        return refdiathermyService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Refdiathermy instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refdiathermy> findRefdiathermies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Refdiathermies list by filter:", query);
        return refdiathermyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Refdiathermy instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refdiathermy> filterRefdiathermies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Refdiathermies list by filter", query);
        return refdiathermyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefdiathermies(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refdiathermyService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRefdiathermiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Refdiathermy.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> refdiathermyService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Refdiathermy instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefdiathermies( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Refdiathermies");
		return refdiathermyService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefdiathermyAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refdiathermyService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefdiathermyService instance
	 */
	protected void setRefdiathermyService(RefdiathermyService service) {
		this.refdiathermyService = service;
	}

}