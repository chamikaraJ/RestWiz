/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.PtDocument;
import com.restwiz.clinicalobs.service.PtDocumentService;


/**
 * Controller object for domain model class PtDocument.
 * @see PtDocument
 */
@RestController("clinicalobs.PtDocumentController")
@Api(value = "PtDocumentController", description = "Exposes APIs to work with PtDocument resource.")
@RequestMapping("/clinicalobs/PtDocument")
public class PtDocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtDocumentController.class);

    @Autowired
	@Qualifier("clinicalobs.PtDocumentService")
	private PtDocumentService ptDocumentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PtDocument instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtDocument createPtDocument(@RequestPart("wm_data_json") PtDocument ptDocument, @RequestPart(value = "docContent", required = false) MultipartFile _docContent) {
		LOGGER.debug("Create PtDocument with information: {}" , ptDocument);

    ptDocument.setDocContent(WMMultipartUtils.toByteArray(_docContent));
		ptDocument = ptDocumentService.create(ptDocument);
		LOGGER.debug("Created PtDocument with information: {}" , ptDocument);

	    return ptDocument;
	}

    @ApiOperation(value = "Returns the PtDocument instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtDocument getPtDocument(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PtDocument with id: {}" , id);

        PtDocument foundPtDocument = ptDocumentService.getById(id);
        LOGGER.debug("PtDocument details with id: {}" , foundPtDocument);

        return foundPtDocument;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in PtDocument instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getPtDocumentBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in PtDocument instance" , fieldName);

        if(!WMRuntimeUtils.isLob(PtDocument.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        PtDocument ptDocument = ptDocumentService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(ptDocument, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the PtDocument instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtDocument editPtDocument(@PathVariable("id") Integer id, @RequestBody PtDocument ptDocument) {
        LOGGER.debug("Editing PtDocument with id: {}" , ptDocument.getIdno());

        ptDocument.setIdno(id);
        ptDocument = ptDocumentService.update(ptDocument);
        LOGGER.debug("PtDocument details with id: {}" , ptDocument);

        return ptDocument;
    }

    @ApiOperation(value = "Updates the PtDocument instance associated with the given id.This API should be used when PtDocument instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PtDocument editPtDocument(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        PtDocument newPtDocument = WMMultipartUtils.toObject(multipartHttpServletRequest, PtDocument.class, "clinicalobs");
        newPtDocument.setIdno(id);

        PtDocument oldPtDocument = ptDocumentService.getById(id);
        WMMultipartUtils.updateLobsContent(oldPtDocument, newPtDocument);
        LOGGER.debug("Updating PtDocument with information: {}" , newPtDocument);

        return ptDocumentService.update(newPtDocument);
    }

    @ApiOperation(value = "Deletes the PtDocument instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePtDocument(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PtDocument with id: {}" , id);

        PtDocument deletedPtDocument = ptDocumentService.delete(id);

        return deletedPtDocument != null;
    }

    /**
     * @deprecated Use {@link #findPtDocuments(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PtDocument instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtDocument> searchPtDocumentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PtDocuments list by query filter:{}", (Object) queryFilters);
        return ptDocumentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PtDocument instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtDocument> findPtDocuments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PtDocuments list by filter:", query);
        return ptDocumentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PtDocument instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PtDocument> filterPtDocuments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PtDocuments list by filter", query);
        return ptDocumentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPtDocuments(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return ptDocumentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPtDocumentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PtDocument.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> ptDocumentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PtDocument instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPtDocuments( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PtDocuments");
		return ptDocumentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPtDocumentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return ptDocumentService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PtDocumentService instance
	 */
	protected void setPtDocumentService(PtDocumentService service) {
		this.ptDocumentService = service;
	}

}