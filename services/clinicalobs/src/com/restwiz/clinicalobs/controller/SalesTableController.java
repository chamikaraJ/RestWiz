/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.SalesTable;
import com.restwiz.clinicalobs.SalesTableId;
import com.restwiz.clinicalobs.service.SalesTableService;


/**
 * Controller object for domain model class SalesTable.
 * @see SalesTable
 */
@RestController("clinicalobs.SalesTableController")
@Api(value = "SalesTableController", description = "Exposes APIs to work with SalesTable resource.")
@RequestMapping("/clinicalobs/SalesTable")
public class SalesTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesTableController.class);

    @Autowired
	@Qualifier("clinicalobs.SalesTableService")
	private SalesTableService salesTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SalesTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesTable createSalesTable(@RequestBody SalesTable salesTable) {
		LOGGER.debug("Create SalesTable with information: {}" , salesTable);

		salesTable = salesTableService.create(salesTable);
		LOGGER.debug("Created SalesTable with information: {}" , salesTable);

	    return salesTable;
	}

    @ApiOperation(value = "Returns the SalesTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesTable getSalesTable(@RequestParam("trxId") Integer trxId, @RequestParam("amount") Integer amount, @RequestParam("name") String name, @RequestParam("team") Short team, @RequestParam("trxDate") Date trxDate) {

        SalesTableId salestableId = new SalesTableId();
        salestableId.setTrxId(trxId);
        salestableId.setAmount(amount);
        salestableId.setName(name);
        salestableId.setTeam(team);
        salestableId.setTrxDate(trxDate);

        LOGGER.debug("Getting SalesTable with id: {}" , salestableId);
        SalesTable salesTable = salesTableService.getById(salestableId);
        LOGGER.debug("SalesTable details with id: {}" , salesTable);

        return salesTable;
    }



    @ApiOperation(value = "Updates the SalesTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesTable editSalesTable(@RequestParam("trxId") Integer trxId, @RequestParam("amount") Integer amount, @RequestParam("name") String name, @RequestParam("team") Short team, @RequestParam("trxDate") Date trxDate, @RequestBody SalesTable salesTable) {

        salesTable.setTrxId(trxId);
        salesTable.setAmount(amount);
        salesTable.setName(name);
        salesTable.setTeam(team);
        salesTable.setTrxDate(trxDate);

        LOGGER.debug("SalesTable details with id is updated with: {}" , salesTable);

        return salesTableService.update(salesTable);
    }


    @ApiOperation(value = "Deletes the SalesTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSalesTable(@RequestParam("trxId") Integer trxId, @RequestParam("amount") Integer amount, @RequestParam("name") String name, @RequestParam("team") Short team, @RequestParam("trxDate") Date trxDate) {

        SalesTableId salestableId = new SalesTableId();
        salestableId.setTrxId(trxId);
        salestableId.setAmount(amount);
        salestableId.setName(name);
        salestableId.setTeam(team);
        salestableId.setTrxDate(trxDate);

        LOGGER.debug("Deleting SalesTable with id: {}" , salestableId);
        SalesTable salesTable = salesTableService.delete(salestableId);

        return salesTable != null;
    }


    /**
     * @deprecated Use {@link #findSalesTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SalesTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesTable> searchSalesTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SalesTables list by query filter:{}", (Object) queryFilters);
        return salesTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SalesTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesTable> findSalesTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SalesTables list by filter:", query);
        return salesTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SalesTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesTable> filterSalesTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SalesTables list by filter", query);
        return salesTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSalesTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return salesTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSalesTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SalesTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> salesTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SalesTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSalesTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SalesTables");
		return salesTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSalesTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return salesTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SalesTableService instance
	 */
	protected void setSalesTableService(SalesTableService service) {
		this.salesTableService = service;
	}

}