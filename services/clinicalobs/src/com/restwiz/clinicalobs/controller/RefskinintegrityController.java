/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restwiz.clinicalobs.Refskinintegrity;
import com.restwiz.clinicalobs.service.RefskinintegrityService;


/**
 * Controller object for domain model class Refskinintegrity.
 * @see Refskinintegrity
 */
@RestController("clinicalobs.RefskinintegrityController")
@Api(value = "RefskinintegrityController", description = "Exposes APIs to work with Refskinintegrity resource.")
@RequestMapping("/clinicalobs/Refskinintegrity")
public class RefskinintegrityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefskinintegrityController.class);

    @Autowired
	@Qualifier("clinicalobs.RefskinintegrityService")
	private RefskinintegrityService refskinintegrityService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Refskinintegrity instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refskinintegrity createRefskinintegrity(@RequestBody Refskinintegrity refskinintegrity) {
		LOGGER.debug("Create Refskinintegrity with information: {}" , refskinintegrity);

		refskinintegrity = refskinintegrityService.create(refskinintegrity);
		LOGGER.debug("Created Refskinintegrity with information: {}" , refskinintegrity);

	    return refskinintegrity;
	}

    @ApiOperation(value = "Returns the Refskinintegrity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refskinintegrity getRefskinintegrity(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Refskinintegrity with id: {}" , id);

        Refskinintegrity foundRefskinintegrity = refskinintegrityService.getById(id);
        LOGGER.debug("Refskinintegrity details with id: {}" , foundRefskinintegrity);

        return foundRefskinintegrity;
    }

    @ApiOperation(value = "Updates the Refskinintegrity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Refskinintegrity editRefskinintegrity(@PathVariable("id") Integer id, @RequestBody Refskinintegrity refskinintegrity) {
        LOGGER.debug("Editing Refskinintegrity with id: {}" , refskinintegrity.getIdno());

        refskinintegrity.setIdno(id);
        refskinintegrity = refskinintegrityService.update(refskinintegrity);
        LOGGER.debug("Refskinintegrity details with id: {}" , refskinintegrity);

        return refskinintegrity;
    }

    @ApiOperation(value = "Deletes the Refskinintegrity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefskinintegrity(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Refskinintegrity with id: {}" , id);

        Refskinintegrity deletedRefskinintegrity = refskinintegrityService.delete(id);

        return deletedRefskinintegrity != null;
    }

    /**
     * @deprecated Use {@link #findRefskinintegrities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Refskinintegrity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refskinintegrity> searchRefskinintegritiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Refskinintegrities list by query filter:{}", (Object) queryFilters);
        return refskinintegrityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Refskinintegrity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refskinintegrity> findRefskinintegrities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Refskinintegrities list by filter:", query);
        return refskinintegrityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Refskinintegrity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Refskinintegrity> filterRefskinintegrities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Refskinintegrities list by filter", query);
        return refskinintegrityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefskinintegrities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refskinintegrityService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRefskinintegritiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Refskinintegrity.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> refskinintegrityService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Refskinintegrity instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefskinintegrities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Refskinintegrities");
		return refskinintegrityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefskinintegrityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refskinintegrityService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefskinintegrityService instance
	 */
	protected void setRefskinintegrityService(RefskinintegrityService service) {
		this.refskinintegrityService = service;
	}

}