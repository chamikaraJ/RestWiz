/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.PtDocument;


/**
 * ServiceImpl object for domain model class PtDocument.
 *
 * @see PtDocument
 */
@Service("clinicalobs.PtDocumentService")
@Validated
public class PtDocumentServiceImpl implements PtDocumentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtDocumentServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.PtDocumentDao")
    private WMGenericDao<PtDocument, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PtDocument, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public PtDocument create(PtDocument ptDocument) {
        LOGGER.debug("Creating a new PtDocument with information: {}", ptDocument);

        PtDocument ptDocumentCreated = this.wmGenericDao.create(ptDocument);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ptDocumentCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public PtDocument getById(Integer ptdocumentId) {
        LOGGER.debug("Finding PtDocument by id: {}", ptdocumentId);
        return this.wmGenericDao.findById(ptdocumentId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public PtDocument findById(Integer ptdocumentId) {
        LOGGER.debug("Finding PtDocument by id: {}", ptdocumentId);
        try {
            return this.wmGenericDao.findById(ptdocumentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PtDocument found with id: {}", ptdocumentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<PtDocument> findByMultipleIds(List<Integer> ptdocumentIds, boolean orderedReturn) {
        LOGGER.debug("Finding PtDocuments by ids: {}", ptdocumentIds);

        return this.wmGenericDao.findByMultipleIds(ptdocumentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public PtDocument update(PtDocument ptDocument) {
        LOGGER.debug("Updating PtDocument with information: {}", ptDocument);

        this.wmGenericDao.update(ptDocument);
        this.wmGenericDao.refresh(ptDocument);

        return ptDocument;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public PtDocument delete(Integer ptdocumentId) {
        LOGGER.debug("Deleting PtDocument with id: {}", ptdocumentId);
        PtDocument deleted = this.wmGenericDao.findById(ptdocumentId);
        if (deleted == null) {
            LOGGER.debug("No PtDocument found with id: {}", ptdocumentId);
            throw new EntityNotFoundException(String.valueOf(ptdocumentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(PtDocument ptDocument) {
        LOGGER.debug("Deleting PtDocument with {}", ptDocument);
        this.wmGenericDao.delete(ptDocument);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtDocument> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PtDocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtDocument> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PtDocuments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table PtDocument to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table PtDocument to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}