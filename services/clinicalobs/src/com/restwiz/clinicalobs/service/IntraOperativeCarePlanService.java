/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.IntraOperativeCarePlan;

/**
 * Service object for domain model class {@link IntraOperativeCarePlan}.
 */
public interface IntraOperativeCarePlanService {

    /**
     * Creates a new IntraOperativeCarePlan. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IntraOperativeCarePlan if any.
     *
     * @param intraOperativeCarePlan Details of the IntraOperativeCarePlan to be created; value cannot be null.
     * @return The newly created IntraOperativeCarePlan.
     */
    IntraOperativeCarePlan create(@Valid IntraOperativeCarePlan intraOperativeCarePlan);


	/**
     * Returns IntraOperativeCarePlan by given id if exists.
     *
     * @param intraoperativecareplanId The id of the IntraOperativeCarePlan to get; value cannot be null.
     * @return IntraOperativeCarePlan associated with the given intraoperativecareplanId.
	 * @throws EntityNotFoundException If no IntraOperativeCarePlan is found.
     */
    IntraOperativeCarePlan getById(Integer intraoperativecareplanId);

    /**
     * Find and return the IntraOperativeCarePlan by given id if exists, returns null otherwise.
     *
     * @param intraoperativecareplanId The id of the IntraOperativeCarePlan to get; value cannot be null.
     * @return IntraOperativeCarePlan associated with the given intraoperativecareplanId.
     */
    IntraOperativeCarePlan findById(Integer intraoperativecareplanId);

	/**
     * Find and return the list of IntraOperativeCarePlans by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param intraoperativecareplanIds The id's of the IntraOperativeCarePlan to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return IntraOperativeCarePlans associated with the given intraoperativecareplanIds.
     */
    List<IntraOperativeCarePlan> findByMultipleIds(List<Integer> intraoperativecareplanIds, boolean orderedReturn);


    /**
     * Updates the details of an existing IntraOperativeCarePlan. It replaces all fields of the existing IntraOperativeCarePlan with the given intraOperativeCarePlan.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IntraOperativeCarePlan if any.
     *
     * @param intraOperativeCarePlan The details of the IntraOperativeCarePlan to be updated; value cannot be null.
     * @return The updated IntraOperativeCarePlan.
     * @throws EntityNotFoundException if no IntraOperativeCarePlan is found with given input.
     */
    IntraOperativeCarePlan update(@Valid IntraOperativeCarePlan intraOperativeCarePlan);

    /**
     * Deletes an existing IntraOperativeCarePlan with the given id.
     *
     * @param intraoperativecareplanId The id of the IntraOperativeCarePlan to be deleted; value cannot be null.
     * @return The deleted IntraOperativeCarePlan.
     * @throws EntityNotFoundException if no IntraOperativeCarePlan found with the given id.
     */
    IntraOperativeCarePlan delete(Integer intraoperativecareplanId);

    /**
     * Deletes an existing IntraOperativeCarePlan with the given object.
     *
     * @param intraOperativeCarePlan The instance of the IntraOperativeCarePlan to be deleted; value cannot be null.
     */
    void delete(IntraOperativeCarePlan intraOperativeCarePlan);

    /**
     * Find all IntraOperativeCarePlans matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IntraOperativeCarePlans.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<IntraOperativeCarePlan> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all IntraOperativeCarePlans matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IntraOperativeCarePlans.
     *
     * @see Pageable
     * @see Page
     */
    Page<IntraOperativeCarePlan> findAll(String query, Pageable pageable);

    /**
     * Exports all IntraOperativeCarePlans matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all IntraOperativeCarePlans matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the IntraOperativeCarePlans in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the IntraOperativeCarePlan.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}