/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refprepsolution;


/**
 * ServiceImpl object for domain model class Refprepsolution.
 *
 * @see Refprepsolution
 */
@Service("clinicalobs.RefprepsolutionService")
@Validated
public class RefprepsolutionServiceImpl implements RefprepsolutionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefprepsolutionServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefprepsolutionDao")
    private WMGenericDao<Refprepsolution, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refprepsolution, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refprepsolution create(Refprepsolution refprepsolution) {
        LOGGER.debug("Creating a new Refprepsolution with information: {}", refprepsolution);

        Refprepsolution refprepsolutionCreated = this.wmGenericDao.create(refprepsolution);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refprepsolutionCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refprepsolution getById(Integer refprepsolutionId) {
        LOGGER.debug("Finding Refprepsolution by id: {}", refprepsolutionId);
        return this.wmGenericDao.findById(refprepsolutionId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refprepsolution findById(Integer refprepsolutionId) {
        LOGGER.debug("Finding Refprepsolution by id: {}", refprepsolutionId);
        try {
            return this.wmGenericDao.findById(refprepsolutionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refprepsolution found with id: {}", refprepsolutionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refprepsolution> findByMultipleIds(List<Integer> refprepsolutionIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refprepsolutions by ids: {}", refprepsolutionIds);

        return this.wmGenericDao.findByMultipleIds(refprepsolutionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refprepsolution update(Refprepsolution refprepsolution) {
        LOGGER.debug("Updating Refprepsolution with information: {}", refprepsolution);

        this.wmGenericDao.update(refprepsolution);
        this.wmGenericDao.refresh(refprepsolution);

        return refprepsolution;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refprepsolution delete(Integer refprepsolutionId) {
        LOGGER.debug("Deleting Refprepsolution with id: {}", refprepsolutionId);
        Refprepsolution deleted = this.wmGenericDao.findById(refprepsolutionId);
        if (deleted == null) {
            LOGGER.debug("No Refprepsolution found with id: {}", refprepsolutionId);
            throw new EntityNotFoundException(String.valueOf(refprepsolutionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refprepsolution refprepsolution) {
        LOGGER.debug("Deleting Refprepsolution with {}", refprepsolution);
        this.wmGenericDao.delete(refprepsolution);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refprepsolution> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refprepsolutions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refprepsolution> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refprepsolutions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refprepsolution to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refprepsolution to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}