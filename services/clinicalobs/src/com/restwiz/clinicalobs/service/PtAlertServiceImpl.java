/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.PtAlert;


/**
 * ServiceImpl object for domain model class PtAlert.
 *
 * @see PtAlert
 */
@Service("clinicalobs.PtAlertService")
@Validated
public class PtAlertServiceImpl implements PtAlertService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtAlertServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.PtAlertDao")
    private WMGenericDao<PtAlert, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PtAlert, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public PtAlert create(PtAlert ptAlert) {
        LOGGER.debug("Creating a new PtAlert with information: {}", ptAlert);

        PtAlert ptAlertCreated = this.wmGenericDao.create(ptAlert);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ptAlertCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public PtAlert getById(Integer ptalertId) {
        LOGGER.debug("Finding PtAlert by id: {}", ptalertId);
        return this.wmGenericDao.findById(ptalertId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public PtAlert findById(Integer ptalertId) {
        LOGGER.debug("Finding PtAlert by id: {}", ptalertId);
        try {
            return this.wmGenericDao.findById(ptalertId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PtAlert found with id: {}", ptalertId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<PtAlert> findByMultipleIds(List<Integer> ptalertIds, boolean orderedReturn) {
        LOGGER.debug("Finding PtAlerts by ids: {}", ptalertIds);

        return this.wmGenericDao.findByMultipleIds(ptalertIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public PtAlert update(PtAlert ptAlert) {
        LOGGER.debug("Updating PtAlert with information: {}", ptAlert);

        this.wmGenericDao.update(ptAlert);
        this.wmGenericDao.refresh(ptAlert);

        return ptAlert;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public PtAlert delete(Integer ptalertId) {
        LOGGER.debug("Deleting PtAlert with id: {}", ptalertId);
        PtAlert deleted = this.wmGenericDao.findById(ptalertId);
        if (deleted == null) {
            LOGGER.debug("No PtAlert found with id: {}", ptalertId);
            throw new EntityNotFoundException(String.valueOf(ptalertId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(PtAlert ptAlert) {
        LOGGER.debug("Deleting PtAlert with {}", ptAlert);
        this.wmGenericDao.delete(ptAlert);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtAlert> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PtAlerts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtAlert> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PtAlerts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table PtAlert to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table PtAlert to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}