/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Anaestheticnurse;

/**
 * Service object for domain model class {@link Anaestheticnurse}.
 */
public interface AnaestheticnurseService {

    /**
     * Creates a new Anaestheticnurse. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Anaestheticnurse if any.
     *
     * @param anaestheticnurse Details of the Anaestheticnurse to be created; value cannot be null.
     * @return The newly created Anaestheticnurse.
     */
    Anaestheticnurse create(@Valid Anaestheticnurse anaestheticnurse);


	/**
     * Returns Anaestheticnurse by given id if exists.
     *
     * @param anaestheticnurseId The id of the Anaestheticnurse to get; value cannot be null.
     * @return Anaestheticnurse associated with the given anaestheticnurseId.
	 * @throws EntityNotFoundException If no Anaestheticnurse is found.
     */
    Anaestheticnurse getById(Integer anaestheticnurseId);

    /**
     * Find and return the Anaestheticnurse by given id if exists, returns null otherwise.
     *
     * @param anaestheticnurseId The id of the Anaestheticnurse to get; value cannot be null.
     * @return Anaestheticnurse associated with the given anaestheticnurseId.
     */
    Anaestheticnurse findById(Integer anaestheticnurseId);

	/**
     * Find and return the list of Anaestheticnurses by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param anaestheticnurseIds The id's of the Anaestheticnurse to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Anaestheticnurses associated with the given anaestheticnurseIds.
     */
    List<Anaestheticnurse> findByMultipleIds(List<Integer> anaestheticnurseIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Anaestheticnurse. It replaces all fields of the existing Anaestheticnurse with the given anaestheticnurse.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Anaestheticnurse if any.
     *
     * @param anaestheticnurse The details of the Anaestheticnurse to be updated; value cannot be null.
     * @return The updated Anaestheticnurse.
     * @throws EntityNotFoundException if no Anaestheticnurse is found with given input.
     */
    Anaestheticnurse update(@Valid Anaestheticnurse anaestheticnurse);

    /**
     * Deletes an existing Anaestheticnurse with the given id.
     *
     * @param anaestheticnurseId The id of the Anaestheticnurse to be deleted; value cannot be null.
     * @return The deleted Anaestheticnurse.
     * @throws EntityNotFoundException if no Anaestheticnurse found with the given id.
     */
    Anaestheticnurse delete(Integer anaestheticnurseId);

    /**
     * Deletes an existing Anaestheticnurse with the given object.
     *
     * @param anaestheticnurse The instance of the Anaestheticnurse to be deleted; value cannot be null.
     */
    void delete(Anaestheticnurse anaestheticnurse);

    /**
     * Find all Anaestheticnurses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Anaestheticnurses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Anaestheticnurse> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Anaestheticnurses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Anaestheticnurses.
     *
     * @see Pageable
     * @see Page
     */
    Page<Anaestheticnurse> findAll(String query, Pageable pageable);

    /**
     * Exports all Anaestheticnurses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Anaestheticnurses matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Anaestheticnurses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Anaestheticnurse.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}