/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.ActionTaken;


/**
 * ServiceImpl object for domain model class ActionTaken.
 *
 * @see ActionTaken
 */
@Service("clinicalobs.ActionTakenService")
@Validated
public class ActionTakenServiceImpl implements ActionTakenService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActionTakenServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.ActionTakenDao")
    private WMGenericDao<ActionTaken, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ActionTaken, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public ActionTaken create(ActionTaken actionTakenInstance) {
        LOGGER.debug("Creating a new ActionTaken with information: {}", actionTakenInstance);

        ActionTaken actionTakenInstanceCreated = this.wmGenericDao.create(actionTakenInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(actionTakenInstanceCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public ActionTaken getById(Integer actiontakenId) {
        LOGGER.debug("Finding ActionTaken by id: {}", actiontakenId);
        return this.wmGenericDao.findById(actiontakenId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public ActionTaken findById(Integer actiontakenId) {
        LOGGER.debug("Finding ActionTaken by id: {}", actiontakenId);
        try {
            return this.wmGenericDao.findById(actiontakenId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ActionTaken found with id: {}", actiontakenId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<ActionTaken> findByMultipleIds(List<Integer> actiontakenIds, boolean orderedReturn) {
        LOGGER.debug("Finding ActionTakens by ids: {}", actiontakenIds);

        return this.wmGenericDao.findByMultipleIds(actiontakenIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public ActionTaken update(ActionTaken actionTakenInstance) {
        LOGGER.debug("Updating ActionTaken with information: {}", actionTakenInstance);

        this.wmGenericDao.update(actionTakenInstance);
        this.wmGenericDao.refresh(actionTakenInstance);

        return actionTakenInstance;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public ActionTaken delete(Integer actiontakenId) {
        LOGGER.debug("Deleting ActionTaken with id: {}", actiontakenId);
        ActionTaken deleted = this.wmGenericDao.findById(actiontakenId);
        if (deleted == null) {
            LOGGER.debug("No ActionTaken found with id: {}", actiontakenId);
            throw new EntityNotFoundException(String.valueOf(actiontakenId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(ActionTaken actionTakenInstance) {
        LOGGER.debug("Deleting ActionTaken with {}", actionTakenInstance);
        this.wmGenericDao.delete(actionTakenInstance);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<ActionTaken> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ActionTakens");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<ActionTaken> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ActionTakens");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table ActionTaken to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table ActionTaken to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}