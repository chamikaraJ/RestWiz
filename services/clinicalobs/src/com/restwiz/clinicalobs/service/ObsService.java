/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Obs;

/**
 * Service object for domain model class {@link Obs}.
 */
public interface ObsService {

    /**
     * Creates a new Obs. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Obs if any.
     *
     * @param obs Details of the Obs to be created; value cannot be null.
     * @return The newly created Obs.
     */
    Obs create(@Valid Obs obs);


	/**
     * Returns Obs by given id if exists.
     *
     * @param obsId The id of the Obs to get; value cannot be null.
     * @return Obs associated with the given obsId.
	 * @throws EntityNotFoundException If no Obs is found.
     */
    Obs getById(Integer obsId);

    /**
     * Find and return the Obs by given id if exists, returns null otherwise.
     *
     * @param obsId The id of the Obs to get; value cannot be null.
     * @return Obs associated with the given obsId.
     */
    Obs findById(Integer obsId);

	/**
     * Find and return the list of Obs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param obsIds The id's of the Obs to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Obs associated with the given obsIds.
     */
    List<Obs> findByMultipleIds(List<Integer> obsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Obs. It replaces all fields of the existing Obs with the given obs.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Obs if any.
     *
     * @param obs The details of the Obs to be updated; value cannot be null.
     * @return The updated Obs.
     * @throws EntityNotFoundException if no Obs is found with given input.
     */
    Obs update(@Valid Obs obs);

    /**
     * Deletes an existing Obs with the given id.
     *
     * @param obsId The id of the Obs to be deleted; value cannot be null.
     * @return The deleted Obs.
     * @throws EntityNotFoundException if no Obs found with the given id.
     */
    Obs delete(Integer obsId);

    /**
     * Deletes an existing Obs with the given object.
     *
     * @param obs The instance of the Obs to be deleted; value cannot be null.
     */
    void delete(Obs obs);

    /**
     * Find all Obs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Obs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Obs> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Obs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Obs.
     *
     * @see Pageable
     * @see Page
     */
    Page<Obs> findAll(String query, Pageable pageable);

    /**
     * Exports all Obs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Obs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Obs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Obs.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}