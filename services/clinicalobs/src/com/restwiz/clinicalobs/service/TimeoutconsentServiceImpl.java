/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Timeoutconsent;


/**
 * ServiceImpl object for domain model class Timeoutconsent.
 *
 * @see Timeoutconsent
 */
@Service("clinicalobs.TimeoutconsentService")
@Validated
public class TimeoutconsentServiceImpl implements TimeoutconsentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeoutconsentServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.TimeoutconsentDao")
    private WMGenericDao<Timeoutconsent, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Timeoutconsent, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Timeoutconsent create(Timeoutconsent timeoutconsent) {
        LOGGER.debug("Creating a new Timeoutconsent with information: {}", timeoutconsent);

        Timeoutconsent timeoutconsentCreated = this.wmGenericDao.create(timeoutconsent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(timeoutconsentCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Timeoutconsent getById(Integer timeoutconsentId) {
        LOGGER.debug("Finding Timeoutconsent by id: {}", timeoutconsentId);
        return this.wmGenericDao.findById(timeoutconsentId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Timeoutconsent findById(Integer timeoutconsentId) {
        LOGGER.debug("Finding Timeoutconsent by id: {}", timeoutconsentId);
        try {
            return this.wmGenericDao.findById(timeoutconsentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Timeoutconsent found with id: {}", timeoutconsentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Timeoutconsent> findByMultipleIds(List<Integer> timeoutconsentIds, boolean orderedReturn) {
        LOGGER.debug("Finding Timeoutconsents by ids: {}", timeoutconsentIds);

        return this.wmGenericDao.findByMultipleIds(timeoutconsentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Timeoutconsent update(Timeoutconsent timeoutconsent) {
        LOGGER.debug("Updating Timeoutconsent with information: {}", timeoutconsent);

        this.wmGenericDao.update(timeoutconsent);
        this.wmGenericDao.refresh(timeoutconsent);

        return timeoutconsent;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Timeoutconsent delete(Integer timeoutconsentId) {
        LOGGER.debug("Deleting Timeoutconsent with id: {}", timeoutconsentId);
        Timeoutconsent deleted = this.wmGenericDao.findById(timeoutconsentId);
        if (deleted == null) {
            LOGGER.debug("No Timeoutconsent found with id: {}", timeoutconsentId);
            throw new EntityNotFoundException(String.valueOf(timeoutconsentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Timeoutconsent timeoutconsent) {
        LOGGER.debug("Deleting Timeoutconsent with {}", timeoutconsent);
        this.wmGenericDao.delete(timeoutconsent);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Timeoutconsent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Timeoutconsents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Timeoutconsent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Timeoutconsents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Timeoutconsent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Timeoutconsent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}