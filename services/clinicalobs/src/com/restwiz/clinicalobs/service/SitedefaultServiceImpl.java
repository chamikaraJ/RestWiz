/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Sitedefault;


/**
 * ServiceImpl object for domain model class Sitedefault.
 *
 * @see Sitedefault
 */
@Service("clinicalobs.SitedefaultService")
@Validated
public class SitedefaultServiceImpl implements SitedefaultService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SitedefaultServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.SitedefaultDao")
    private WMGenericDao<Sitedefault, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Sitedefault, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Sitedefault create(Sitedefault sitedefault) {
        LOGGER.debug("Creating a new Sitedefault with information: {}", sitedefault);

        Sitedefault sitedefaultCreated = this.wmGenericDao.create(sitedefault);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(sitedefaultCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Sitedefault getById(Integer sitedefaultId) {
        LOGGER.debug("Finding Sitedefault by id: {}", sitedefaultId);
        return this.wmGenericDao.findById(sitedefaultId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Sitedefault findById(Integer sitedefaultId) {
        LOGGER.debug("Finding Sitedefault by id: {}", sitedefaultId);
        try {
            return this.wmGenericDao.findById(sitedefaultId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Sitedefault found with id: {}", sitedefaultId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Sitedefault> findByMultipleIds(List<Integer> sitedefaultIds, boolean orderedReturn) {
        LOGGER.debug("Finding Sitedefaults by ids: {}", sitedefaultIds);

        return this.wmGenericDao.findByMultipleIds(sitedefaultIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Sitedefault update(Sitedefault sitedefault) {
        LOGGER.debug("Updating Sitedefault with information: {}", sitedefault);

        this.wmGenericDao.update(sitedefault);
        this.wmGenericDao.refresh(sitedefault);

        return sitedefault;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Sitedefault delete(Integer sitedefaultId) {
        LOGGER.debug("Deleting Sitedefault with id: {}", sitedefaultId);
        Sitedefault deleted = this.wmGenericDao.findById(sitedefaultId);
        if (deleted == null) {
            LOGGER.debug("No Sitedefault found with id: {}", sitedefaultId);
            throw new EntityNotFoundException(String.valueOf(sitedefaultId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Sitedefault sitedefault) {
        LOGGER.debug("Deleting Sitedefault with {}", sitedefault);
        this.wmGenericDao.delete(sitedefault);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Sitedefault> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Sitedefaults");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Sitedefault> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Sitedefaults");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Sitedefault to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Sitedefault to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}