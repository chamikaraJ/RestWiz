/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.PtDocument;

/**
 * Service object for domain model class {@link PtDocument}.
 */
public interface PtDocumentService {

    /**
     * Creates a new PtDocument. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PtDocument if any.
     *
     * @param ptDocument Details of the PtDocument to be created; value cannot be null.
     * @return The newly created PtDocument.
     */
    PtDocument create(@Valid PtDocument ptDocument);


	/**
     * Returns PtDocument by given id if exists.
     *
     * @param ptdocumentId The id of the PtDocument to get; value cannot be null.
     * @return PtDocument associated with the given ptdocumentId.
	 * @throws EntityNotFoundException If no PtDocument is found.
     */
    PtDocument getById(Integer ptdocumentId);

    /**
     * Find and return the PtDocument by given id if exists, returns null otherwise.
     *
     * @param ptdocumentId The id of the PtDocument to get; value cannot be null.
     * @return PtDocument associated with the given ptdocumentId.
     */
    PtDocument findById(Integer ptdocumentId);

	/**
     * Find and return the list of PtDocuments by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param ptdocumentIds The id's of the PtDocument to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PtDocuments associated with the given ptdocumentIds.
     */
    List<PtDocument> findByMultipleIds(List<Integer> ptdocumentIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PtDocument. It replaces all fields of the existing PtDocument with the given ptDocument.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PtDocument if any.
     *
     * @param ptDocument The details of the PtDocument to be updated; value cannot be null.
     * @return The updated PtDocument.
     * @throws EntityNotFoundException if no PtDocument is found with given input.
     */
    PtDocument update(@Valid PtDocument ptDocument);

    /**
     * Deletes an existing PtDocument with the given id.
     *
     * @param ptdocumentId The id of the PtDocument to be deleted; value cannot be null.
     * @return The deleted PtDocument.
     * @throws EntityNotFoundException if no PtDocument found with the given id.
     */
    PtDocument delete(Integer ptdocumentId);

    /**
     * Deletes an existing PtDocument with the given object.
     *
     * @param ptDocument The instance of the PtDocument to be deleted; value cannot be null.
     */
    void delete(PtDocument ptDocument);

    /**
     * Find all PtDocuments matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PtDocuments.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PtDocument> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PtDocuments matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PtDocuments.
     *
     * @see Pageable
     * @see Page
     */
    Page<PtDocument> findAll(String query, Pageable pageable);

    /**
     * Exports all PtDocuments matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PtDocuments matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PtDocuments in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PtDocument.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}