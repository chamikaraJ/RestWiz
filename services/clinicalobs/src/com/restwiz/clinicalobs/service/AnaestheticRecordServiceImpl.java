/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.AnaestheticIvdrug;
import com.restwiz.clinicalobs.AnaestheticIvfluid;
import com.restwiz.clinicalobs.AnaestheticRecord;
import com.restwiz.clinicalobs.Obs;


/**
 * ServiceImpl object for domain model class AnaestheticRecord.
 *
 * @see AnaestheticRecord
 */
@Service("clinicalobs.AnaestheticRecordService")
@Validated
public class AnaestheticRecordServiceImpl implements AnaestheticRecordService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnaestheticRecordServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.AnaestheticIvdrugService")
    private AnaestheticIvdrugService anaestheticIvdrugService;

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.ObsService")
    private ObsService obsService;

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.AnaestheticIvfluidService")
    private AnaestheticIvfluidService anaestheticIvfluidService;

    @Autowired
    @Qualifier("clinicalobs.AnaestheticRecordDao")
    private WMGenericDao<AnaestheticRecord, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AnaestheticRecord, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticRecord create(AnaestheticRecord anaestheticRecord) {
        LOGGER.debug("Creating a new AnaestheticRecord with information: {}", anaestheticRecord);

        AnaestheticRecord anaestheticRecordCreated = this.wmGenericDao.create(anaestheticRecord);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(anaestheticRecordCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticRecord getById(Integer anaestheticrecordId) {
        LOGGER.debug("Finding AnaestheticRecord by id: {}", anaestheticrecordId);
        return this.wmGenericDao.findById(anaestheticrecordId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticRecord findById(Integer anaestheticrecordId) {
        LOGGER.debug("Finding AnaestheticRecord by id: {}", anaestheticrecordId);
        try {
            return this.wmGenericDao.findById(anaestheticrecordId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AnaestheticRecord found with id: {}", anaestheticrecordId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<AnaestheticRecord> findByMultipleIds(List<Integer> anaestheticrecordIds, boolean orderedReturn) {
        LOGGER.debug("Finding AnaestheticRecords by ids: {}", anaestheticrecordIds);

        return this.wmGenericDao.findByMultipleIds(anaestheticrecordIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticRecord update(AnaestheticRecord anaestheticRecord) {
        LOGGER.debug("Updating AnaestheticRecord with information: {}", anaestheticRecord);

        this.wmGenericDao.update(anaestheticRecord);
        this.wmGenericDao.refresh(anaestheticRecord);

        return anaestheticRecord;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticRecord delete(Integer anaestheticrecordId) {
        LOGGER.debug("Deleting AnaestheticRecord with id: {}", anaestheticrecordId);
        AnaestheticRecord deleted = this.wmGenericDao.findById(anaestheticrecordId);
        if (deleted == null) {
            LOGGER.debug("No AnaestheticRecord found with id: {}", anaestheticrecordId);
            throw new EntityNotFoundException(String.valueOf(anaestheticrecordId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(AnaestheticRecord anaestheticRecord) {
        LOGGER.debug("Deleting AnaestheticRecord with {}", anaestheticRecord);
        this.wmGenericDao.delete(anaestheticRecord);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<AnaestheticRecord> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AnaestheticRecords");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<AnaestheticRecord> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AnaestheticRecords");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table AnaestheticRecord to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table AnaestheticRecord to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<AnaestheticIvdrug> findAssociatedAnaestheticIvdrugs(Integer idno, Pageable pageable) {
        LOGGER.debug("Fetching all associated anaestheticIvdrugs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("anaestheticRecord.idno = '" + idno + "'");

        return anaestheticIvdrugService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<AnaestheticIvfluid> findAssociatedAnaestheticIvfluids(Integer idno, Pageable pageable) {
        LOGGER.debug("Fetching all associated anaestheticIvfluids");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("anaestheticRecord.idno = '" + idno + "'");

        return anaestheticIvfluidService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Obs> findAssociatedObses(Integer idno, Pageable pageable) {
        LOGGER.debug("Fetching all associated obses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("anaestheticRecord.idno = '" + idno + "'");

        return obsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AnaestheticIvdrugService instance
     */
    protected void setAnaestheticIvdrugService(AnaestheticIvdrugService service) {
        this.anaestheticIvdrugService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ObsService instance
     */
    protected void setObsService(ObsService service) {
        this.obsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AnaestheticIvfluidService instance
     */
    protected void setAnaestheticIvfluidService(AnaestheticIvfluidService service) {
        this.anaestheticIvfluidService = service;
    }

}