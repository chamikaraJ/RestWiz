/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refskinintegrity;


/**
 * ServiceImpl object for domain model class Refskinintegrity.
 *
 * @see Refskinintegrity
 */
@Service("clinicalobs.RefskinintegrityService")
@Validated
public class RefskinintegrityServiceImpl implements RefskinintegrityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefskinintegrityServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefskinintegrityDao")
    private WMGenericDao<Refskinintegrity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refskinintegrity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refskinintegrity create(Refskinintegrity refskinintegrity) {
        LOGGER.debug("Creating a new Refskinintegrity with information: {}", refskinintegrity);

        Refskinintegrity refskinintegrityCreated = this.wmGenericDao.create(refskinintegrity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refskinintegrityCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refskinintegrity getById(Integer refskinintegrityId) {
        LOGGER.debug("Finding Refskinintegrity by id: {}", refskinintegrityId);
        return this.wmGenericDao.findById(refskinintegrityId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refskinintegrity findById(Integer refskinintegrityId) {
        LOGGER.debug("Finding Refskinintegrity by id: {}", refskinintegrityId);
        try {
            return this.wmGenericDao.findById(refskinintegrityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refskinintegrity found with id: {}", refskinintegrityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refskinintegrity> findByMultipleIds(List<Integer> refskinintegrityIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refskinintegrities by ids: {}", refskinintegrityIds);

        return this.wmGenericDao.findByMultipleIds(refskinintegrityIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refskinintegrity update(Refskinintegrity refskinintegrity) {
        LOGGER.debug("Updating Refskinintegrity with information: {}", refskinintegrity);

        this.wmGenericDao.update(refskinintegrity);
        this.wmGenericDao.refresh(refskinintegrity);

        return refskinintegrity;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refskinintegrity delete(Integer refskinintegrityId) {
        LOGGER.debug("Deleting Refskinintegrity with id: {}", refskinintegrityId);
        Refskinintegrity deleted = this.wmGenericDao.findById(refskinintegrityId);
        if (deleted == null) {
            LOGGER.debug("No Refskinintegrity found with id: {}", refskinintegrityId);
            throw new EntityNotFoundException(String.valueOf(refskinintegrityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refskinintegrity refskinintegrity) {
        LOGGER.debug("Deleting Refskinintegrity with {}", refskinintegrity);
        this.wmGenericDao.delete(refskinintegrity);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refskinintegrity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refskinintegrities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refskinintegrity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refskinintegrities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refskinintegrity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refskinintegrity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}