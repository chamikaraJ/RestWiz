/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.SalesTable;
import com.restwiz.clinicalobs.SalesTableId;


/**
 * ServiceImpl object for domain model class SalesTable.
 *
 * @see SalesTable
 */
@Service("clinicalobs.SalesTableService")
@Validated
public class SalesTableServiceImpl implements SalesTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesTableServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.SalesTableDao")
    private WMGenericDao<SalesTable, SalesTableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SalesTable, SalesTableId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public SalesTable create(SalesTable salesTable) {
        LOGGER.debug("Creating a new SalesTable with information: {}", salesTable);

        SalesTable salesTableCreated = this.wmGenericDao.create(salesTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(salesTableCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public SalesTable getById(SalesTableId salestableId) {
        LOGGER.debug("Finding SalesTable by id: {}", salestableId);
        return this.wmGenericDao.findById(salestableId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public SalesTable findById(SalesTableId salestableId) {
        LOGGER.debug("Finding SalesTable by id: {}", salestableId);
        try {
            return this.wmGenericDao.findById(salestableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SalesTable found with id: {}", salestableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<SalesTable> findByMultipleIds(List<SalesTableId> salestableIds, boolean orderedReturn) {
        LOGGER.debug("Finding SalesTables by ids: {}", salestableIds);

        return this.wmGenericDao.findByMultipleIds(salestableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public SalesTable update(SalesTable salesTable) {
        LOGGER.debug("Updating SalesTable with information: {}", salesTable);

        this.wmGenericDao.update(salesTable);
        this.wmGenericDao.refresh(salesTable);

        return salesTable;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public SalesTable delete(SalesTableId salestableId) {
        LOGGER.debug("Deleting SalesTable with id: {}", salestableId);
        SalesTable deleted = this.wmGenericDao.findById(salestableId);
        if (deleted == null) {
            LOGGER.debug("No SalesTable found with id: {}", salestableId);
            throw new EntityNotFoundException(String.valueOf(salestableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(SalesTable salesTable) {
        LOGGER.debug("Deleting SalesTable with {}", salesTable);
        this.wmGenericDao.delete(salesTable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<SalesTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SalesTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<SalesTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SalesTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table SalesTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table SalesTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}