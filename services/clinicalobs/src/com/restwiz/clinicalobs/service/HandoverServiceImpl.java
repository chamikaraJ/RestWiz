/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Handover;


/**
 * ServiceImpl object for domain model class Handover.
 *
 * @see Handover
 */
@Service("clinicalobs.HandoverService")
@Validated
public class HandoverServiceImpl implements HandoverService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HandoverServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.HandoverDao")
    private WMGenericDao<Handover, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Handover, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Handover create(Handover handover) {
        LOGGER.debug("Creating a new Handover with information: {}", handover);

        Handover handoverCreated = this.wmGenericDao.create(handover);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(handoverCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Handover getById(Integer handoverIdInstance) {
        LOGGER.debug("Finding Handover by id: {}", handoverIdInstance);
        return this.wmGenericDao.findById(handoverIdInstance);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Handover findById(Integer handoverIdInstance) {
        LOGGER.debug("Finding Handover by id: {}", handoverIdInstance);
        try {
            return this.wmGenericDao.findById(handoverIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Handover found with id: {}", handoverIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Handover> findByMultipleIds(List<Integer> handoverIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Handovers by ids: {}", handoverIdInstances);

        return this.wmGenericDao.findByMultipleIds(handoverIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Handover update(Handover handover) {
        LOGGER.debug("Updating Handover with information: {}", handover);

        this.wmGenericDao.update(handover);
        this.wmGenericDao.refresh(handover);

        return handover;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Handover delete(Integer handoverIdInstance) {
        LOGGER.debug("Deleting Handover with id: {}", handoverIdInstance);
        Handover deleted = this.wmGenericDao.findById(handoverIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Handover found with id: {}", handoverIdInstance);
            throw new EntityNotFoundException(String.valueOf(handoverIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Handover handover) {
        LOGGER.debug("Deleting Handover with {}", handover);
        this.wmGenericDao.delete(handover);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Handover> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Handovers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Handover> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Handovers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Handover to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Handover to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}