/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.AnaestheticIvdrug;


/**
 * ServiceImpl object for domain model class AnaestheticIvdrug.
 *
 * @see AnaestheticIvdrug
 */
@Service("clinicalobs.AnaestheticIvdrugService")
@Validated
public class AnaestheticIvdrugServiceImpl implements AnaestheticIvdrugService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnaestheticIvdrugServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.AnaestheticIvdrugDao")
    private WMGenericDao<AnaestheticIvdrug, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AnaestheticIvdrug, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticIvdrug create(AnaestheticIvdrug anaestheticIvdrug) {
        LOGGER.debug("Creating a new AnaestheticIvdrug with information: {}", anaestheticIvdrug);

        AnaestheticIvdrug anaestheticIvdrugCreated = this.wmGenericDao.create(anaestheticIvdrug);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(anaestheticIvdrugCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticIvdrug getById(Integer anaestheticivdrugId) {
        LOGGER.debug("Finding AnaestheticIvdrug by id: {}", anaestheticivdrugId);
        return this.wmGenericDao.findById(anaestheticivdrugId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticIvdrug findById(Integer anaestheticivdrugId) {
        LOGGER.debug("Finding AnaestheticIvdrug by id: {}", anaestheticivdrugId);
        try {
            return this.wmGenericDao.findById(anaestheticivdrugId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AnaestheticIvdrug found with id: {}", anaestheticivdrugId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<AnaestheticIvdrug> findByMultipleIds(List<Integer> anaestheticivdrugIds, boolean orderedReturn) {
        LOGGER.debug("Finding AnaestheticIvdrugs by ids: {}", anaestheticivdrugIds);

        return this.wmGenericDao.findByMultipleIds(anaestheticivdrugIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticIvdrug update(AnaestheticIvdrug anaestheticIvdrug) {
        LOGGER.debug("Updating AnaestheticIvdrug with information: {}", anaestheticIvdrug);

        this.wmGenericDao.update(anaestheticIvdrug);
        this.wmGenericDao.refresh(anaestheticIvdrug);

        return anaestheticIvdrug;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public AnaestheticIvdrug delete(Integer anaestheticivdrugId) {
        LOGGER.debug("Deleting AnaestheticIvdrug with id: {}", anaestheticivdrugId);
        AnaestheticIvdrug deleted = this.wmGenericDao.findById(anaestheticivdrugId);
        if (deleted == null) {
            LOGGER.debug("No AnaestheticIvdrug found with id: {}", anaestheticivdrugId);
            throw new EntityNotFoundException(String.valueOf(anaestheticivdrugId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(AnaestheticIvdrug anaestheticIvdrug) {
        LOGGER.debug("Deleting AnaestheticIvdrug with {}", anaestheticIvdrug);
        this.wmGenericDao.delete(anaestheticIvdrug);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<AnaestheticIvdrug> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AnaestheticIvdrugs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<AnaestheticIvdrug> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AnaestheticIvdrugs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table AnaestheticIvdrug to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table AnaestheticIvdrug to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}