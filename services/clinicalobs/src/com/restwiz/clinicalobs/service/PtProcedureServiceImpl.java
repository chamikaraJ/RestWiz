/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.PtProcedure;


/**
 * ServiceImpl object for domain model class PtProcedure.
 *
 * @see PtProcedure
 */
@Service("clinicalobs.PtProcedureService")
@Validated
public class PtProcedureServiceImpl implements PtProcedureService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtProcedureServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.PtProcedureDao")
    private WMGenericDao<PtProcedure, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PtProcedure, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public PtProcedure create(PtProcedure ptProcedure) {
        LOGGER.debug("Creating a new PtProcedure with information: {}", ptProcedure);

        PtProcedure ptProcedureCreated = this.wmGenericDao.create(ptProcedure);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ptProcedureCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public PtProcedure getById(Integer ptprocedureId) {
        LOGGER.debug("Finding PtProcedure by id: {}", ptprocedureId);
        return this.wmGenericDao.findById(ptprocedureId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public PtProcedure findById(Integer ptprocedureId) {
        LOGGER.debug("Finding PtProcedure by id: {}", ptprocedureId);
        try {
            return this.wmGenericDao.findById(ptprocedureId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PtProcedure found with id: {}", ptprocedureId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<PtProcedure> findByMultipleIds(List<Integer> ptprocedureIds, boolean orderedReturn) {
        LOGGER.debug("Finding PtProcedures by ids: {}", ptprocedureIds);

        return this.wmGenericDao.findByMultipleIds(ptprocedureIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public PtProcedure update(PtProcedure ptProcedure) {
        LOGGER.debug("Updating PtProcedure with information: {}", ptProcedure);

        this.wmGenericDao.update(ptProcedure);
        this.wmGenericDao.refresh(ptProcedure);

        return ptProcedure;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public PtProcedure delete(Integer ptprocedureId) {
        LOGGER.debug("Deleting PtProcedure with id: {}", ptprocedureId);
        PtProcedure deleted = this.wmGenericDao.findById(ptprocedureId);
        if (deleted == null) {
            LOGGER.debug("No PtProcedure found with id: {}", ptprocedureId);
            throw new EntityNotFoundException(String.valueOf(ptprocedureId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(PtProcedure ptProcedure) {
        LOGGER.debug("Deleting PtProcedure with {}", ptProcedure);
        this.wmGenericDao.delete(ptProcedure);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtProcedure> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PtProcedures");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtProcedure> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PtProcedures");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table PtProcedure to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table PtProcedure to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}