/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Mwusers;


/**
 * ServiceImpl object for domain model class Mwusers.
 *
 * @see Mwusers
 */
@Service("clinicalobs.MwusersService")
@Validated
public class MwusersServiceImpl implements MwusersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MwusersServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.MwusersDao")
    private WMGenericDao<Mwusers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Mwusers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Mwusers create(Mwusers mwusers) {
        LOGGER.debug("Creating a new Mwusers with information: {}", mwusers);

        Mwusers mwusersCreated = this.wmGenericDao.create(mwusers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(mwusersCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Mwusers getById(Integer mwusersId) {
        LOGGER.debug("Finding Mwusers by id: {}", mwusersId);
        return this.wmGenericDao.findById(mwusersId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Mwusers findById(Integer mwusersId) {
        LOGGER.debug("Finding Mwusers by id: {}", mwusersId);
        try {
            return this.wmGenericDao.findById(mwusersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Mwusers found with id: {}", mwusersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Mwusers> findByMultipleIds(List<Integer> mwusersIds, boolean orderedReturn) {
        LOGGER.debug("Finding Mwusers by ids: {}", mwusersIds);

        return this.wmGenericDao.findByMultipleIds(mwusersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Mwusers update(Mwusers mwusers) {
        LOGGER.debug("Updating Mwusers with information: {}", mwusers);

        this.wmGenericDao.update(mwusers);
        this.wmGenericDao.refresh(mwusers);

        return mwusers;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Mwusers delete(Integer mwusersId) {
        LOGGER.debug("Deleting Mwusers with id: {}", mwusersId);
        Mwusers deleted = this.wmGenericDao.findById(mwusersId);
        if (deleted == null) {
            LOGGER.debug("No Mwusers found with id: {}", mwusersId);
            throw new EntityNotFoundException(String.valueOf(mwusersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Mwusers mwusers) {
        LOGGER.debug("Deleting Mwusers with {}", mwusers);
        this.wmGenericDao.delete(mwusers);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Mwusers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Mwusers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Mwusers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Mwusers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Mwusers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Mwusers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}