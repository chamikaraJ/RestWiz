/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.DynamicDataForHtml;
import com.restwiz.clinicalobs.DynamicHtmlanswer;


/**
 * ServiceImpl object for domain model class DynamicDataForHtml.
 *
 * @see DynamicDataForHtml
 */
@Service("clinicalobs.DynamicDataForHtmlService")
@Validated
public class DynamicDataForHtmlServiceImpl implements DynamicDataForHtmlService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicDataForHtmlServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.DynamicHtmlanswerService")
    private DynamicHtmlanswerService dynamicHtmlanswerService;

    @Autowired
    @Qualifier("clinicalobs.DynamicDataForHtmlDao")
    private WMGenericDao<DynamicDataForHtml, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DynamicDataForHtml, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public DynamicDataForHtml create(DynamicDataForHtml dynamicDataForHtml) {
        LOGGER.debug("Creating a new DynamicDataForHtml with information: {}", dynamicDataForHtml);

        DynamicDataForHtml dynamicDataForHtmlCreated = this.wmGenericDao.create(dynamicDataForHtml);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(dynamicDataForHtmlCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public DynamicDataForHtml getById(Integer dynamicdataforhtmlId) {
        LOGGER.debug("Finding DynamicDataForHtml by id: {}", dynamicdataforhtmlId);
        return this.wmGenericDao.findById(dynamicdataforhtmlId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public DynamicDataForHtml findById(Integer dynamicdataforhtmlId) {
        LOGGER.debug("Finding DynamicDataForHtml by id: {}", dynamicdataforhtmlId);
        try {
            return this.wmGenericDao.findById(dynamicdataforhtmlId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DynamicDataForHtml found with id: {}", dynamicdataforhtmlId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<DynamicDataForHtml> findByMultipleIds(List<Integer> dynamicdataforhtmlIds, boolean orderedReturn) {
        LOGGER.debug("Finding DynamicDataForHtmls by ids: {}", dynamicdataforhtmlIds);

        return this.wmGenericDao.findByMultipleIds(dynamicdataforhtmlIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public DynamicDataForHtml update(DynamicDataForHtml dynamicDataForHtml) {
        LOGGER.debug("Updating DynamicDataForHtml with information: {}", dynamicDataForHtml);

        this.wmGenericDao.update(dynamicDataForHtml);
        this.wmGenericDao.refresh(dynamicDataForHtml);

        return dynamicDataForHtml;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public DynamicDataForHtml delete(Integer dynamicdataforhtmlId) {
        LOGGER.debug("Deleting DynamicDataForHtml with id: {}", dynamicdataforhtmlId);
        DynamicDataForHtml deleted = this.wmGenericDao.findById(dynamicdataforhtmlId);
        if (deleted == null) {
            LOGGER.debug("No DynamicDataForHtml found with id: {}", dynamicdataforhtmlId);
            throw new EntityNotFoundException(String.valueOf(dynamicdataforhtmlId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(DynamicDataForHtml dynamicDataForHtml) {
        LOGGER.debug("Deleting DynamicDataForHtml with {}", dynamicDataForHtml);
        this.wmGenericDao.delete(dynamicDataForHtml);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<DynamicDataForHtml> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DynamicDataForHtmls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<DynamicDataForHtml> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DynamicDataForHtmls");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table DynamicDataForHtml to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table DynamicDataForHtml to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<DynamicHtmlanswer> findAssociatedDynamicHtmlanswers(Integer idno, Pageable pageable) {
        LOGGER.debug("Fetching all associated dynamicHtmlanswers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("dynamicDataForHtml.idno = '" + idno + "'");

        return dynamicHtmlanswerService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DynamicHtmlanswerService instance
     */
    protected void setDynamicHtmlanswerService(DynamicHtmlanswerService service) {
        this.dynamicHtmlanswerService = service;
    }

}