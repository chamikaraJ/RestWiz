/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refinfiltration;


/**
 * ServiceImpl object for domain model class Refinfiltration.
 *
 * @see Refinfiltration
 */
@Service("clinicalobs.RefinfiltrationService")
@Validated
public class RefinfiltrationServiceImpl implements RefinfiltrationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefinfiltrationServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefinfiltrationDao")
    private WMGenericDao<Refinfiltration, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refinfiltration, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refinfiltration create(Refinfiltration refinfiltration) {
        LOGGER.debug("Creating a new Refinfiltration with information: {}", refinfiltration);

        Refinfiltration refinfiltrationCreated = this.wmGenericDao.create(refinfiltration);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refinfiltrationCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refinfiltration getById(Integer refinfiltrationId) {
        LOGGER.debug("Finding Refinfiltration by id: {}", refinfiltrationId);
        return this.wmGenericDao.findById(refinfiltrationId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refinfiltration findById(Integer refinfiltrationId) {
        LOGGER.debug("Finding Refinfiltration by id: {}", refinfiltrationId);
        try {
            return this.wmGenericDao.findById(refinfiltrationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refinfiltration found with id: {}", refinfiltrationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refinfiltration> findByMultipleIds(List<Integer> refinfiltrationIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refinfiltrations by ids: {}", refinfiltrationIds);

        return this.wmGenericDao.findByMultipleIds(refinfiltrationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refinfiltration update(Refinfiltration refinfiltration) {
        LOGGER.debug("Updating Refinfiltration with information: {}", refinfiltration);

        this.wmGenericDao.update(refinfiltration);
        this.wmGenericDao.refresh(refinfiltration);

        return refinfiltration;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refinfiltration delete(Integer refinfiltrationId) {
        LOGGER.debug("Deleting Refinfiltration with id: {}", refinfiltrationId);
        Refinfiltration deleted = this.wmGenericDao.findById(refinfiltrationId);
        if (deleted == null) {
            LOGGER.debug("No Refinfiltration found with id: {}", refinfiltrationId);
            throw new EntityNotFoundException(String.valueOf(refinfiltrationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refinfiltration refinfiltration) {
        LOGGER.debug("Deleting Refinfiltration with {}", refinfiltration);
        this.wmGenericDao.delete(refinfiltration);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refinfiltration> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refinfiltrations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refinfiltration> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refinfiltrations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refinfiltration to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refinfiltration to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}