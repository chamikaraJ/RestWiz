/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Clinicalalerts;
import com.restwiz.clinicalobs.PtAlert;


/**
 * ServiceImpl object for domain model class Clinicalalerts.
 *
 * @see Clinicalalerts
 */
@Service("clinicalobs.ClinicalalertsService")
@Validated
public class ClinicalalertsServiceImpl implements ClinicalalertsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ClinicalalertsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.PtAlertService")
    private PtAlertService ptAlertService;

    @Autowired
    @Qualifier("clinicalobs.ClinicalalertsDao")
    private WMGenericDao<Clinicalalerts, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Clinicalalerts, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Clinicalalerts create(Clinicalalerts clinicalalerts) {
        LOGGER.debug("Creating a new Clinicalalerts with information: {}", clinicalalerts);

        Clinicalalerts clinicalalertsCreated = this.wmGenericDao.create(clinicalalerts);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(clinicalalertsCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Clinicalalerts getById(Integer clinicalalertsId) {
        LOGGER.debug("Finding Clinicalalerts by id: {}", clinicalalertsId);
        return this.wmGenericDao.findById(clinicalalertsId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Clinicalalerts findById(Integer clinicalalertsId) {
        LOGGER.debug("Finding Clinicalalerts by id: {}", clinicalalertsId);
        try {
            return this.wmGenericDao.findById(clinicalalertsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Clinicalalerts found with id: {}", clinicalalertsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Clinicalalerts> findByMultipleIds(List<Integer> clinicalalertsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Clinicalalerts by ids: {}", clinicalalertsIds);

        return this.wmGenericDao.findByMultipleIds(clinicalalertsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Clinicalalerts update(Clinicalalerts clinicalalerts) {
        LOGGER.debug("Updating Clinicalalerts with information: {}", clinicalalerts);

        this.wmGenericDao.update(clinicalalerts);
        this.wmGenericDao.refresh(clinicalalerts);

        return clinicalalerts;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Clinicalalerts delete(Integer clinicalalertsId) {
        LOGGER.debug("Deleting Clinicalalerts with id: {}", clinicalalertsId);
        Clinicalalerts deleted = this.wmGenericDao.findById(clinicalalertsId);
        if (deleted == null) {
            LOGGER.debug("No Clinicalalerts found with id: {}", clinicalalertsId);
            throw new EntityNotFoundException(String.valueOf(clinicalalertsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Clinicalalerts clinicalalerts) {
        LOGGER.debug("Deleting Clinicalalerts with {}", clinicalalerts);
        this.wmGenericDao.delete(clinicalalerts);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Clinicalalerts> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Clinicalalerts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Clinicalalerts> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Clinicalalerts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Clinicalalerts to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Clinicalalerts to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtAlert> findAssociatedPtAlerts(Integer alertId, Pageable pageable) {
        LOGGER.debug("Fetching all associated ptAlerts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("clinicalalerts.alertId = '" + alertId + "'");

        return ptAlertService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PtAlertService instance
     */
    protected void setPtAlertService(PtAlertService service) {
        this.ptAlertService = service;
    }

}