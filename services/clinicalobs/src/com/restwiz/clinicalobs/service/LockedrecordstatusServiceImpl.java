/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Lockedrecordstatus;


/**
 * ServiceImpl object for domain model class Lockedrecordstatus.
 *
 * @see Lockedrecordstatus
 */
@Service("clinicalobs.LockedrecordstatusService")
@Validated
public class LockedrecordstatusServiceImpl implements LockedrecordstatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LockedrecordstatusServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.LockedrecordstatusDao")
    private WMGenericDao<Lockedrecordstatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Lockedrecordstatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Lockedrecordstatus create(Lockedrecordstatus lockedrecordstatus) {
        LOGGER.debug("Creating a new Lockedrecordstatus with information: {}", lockedrecordstatus);

        Lockedrecordstatus lockedrecordstatusCreated = this.wmGenericDao.create(lockedrecordstatus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(lockedrecordstatusCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Lockedrecordstatus getById(Integer lockedrecordstatusId) {
        LOGGER.debug("Finding Lockedrecordstatus by id: {}", lockedrecordstatusId);
        return this.wmGenericDao.findById(lockedrecordstatusId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Lockedrecordstatus findById(Integer lockedrecordstatusId) {
        LOGGER.debug("Finding Lockedrecordstatus by id: {}", lockedrecordstatusId);
        try {
            return this.wmGenericDao.findById(lockedrecordstatusId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Lockedrecordstatus found with id: {}", lockedrecordstatusId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Lockedrecordstatus> findByMultipleIds(List<Integer> lockedrecordstatusIds, boolean orderedReturn) {
        LOGGER.debug("Finding Lockedrecordstatuses by ids: {}", lockedrecordstatusIds);

        return this.wmGenericDao.findByMultipleIds(lockedrecordstatusIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Lockedrecordstatus update(Lockedrecordstatus lockedrecordstatus) {
        LOGGER.debug("Updating Lockedrecordstatus with information: {}", lockedrecordstatus);

        this.wmGenericDao.update(lockedrecordstatus);
        this.wmGenericDao.refresh(lockedrecordstatus);

        return lockedrecordstatus;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Lockedrecordstatus delete(Integer lockedrecordstatusId) {
        LOGGER.debug("Deleting Lockedrecordstatus with id: {}", lockedrecordstatusId);
        Lockedrecordstatus deleted = this.wmGenericDao.findById(lockedrecordstatusId);
        if (deleted == null) {
            LOGGER.debug("No Lockedrecordstatus found with id: {}", lockedrecordstatusId);
            throw new EntityNotFoundException(String.valueOf(lockedrecordstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Lockedrecordstatus lockedrecordstatus) {
        LOGGER.debug("Deleting Lockedrecordstatus with {}", lockedrecordstatus);
        this.wmGenericDao.delete(lockedrecordstatus);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Lockedrecordstatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Lockedrecordstatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Lockedrecordstatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Lockedrecordstatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Lockedrecordstatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Lockedrecordstatus to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}