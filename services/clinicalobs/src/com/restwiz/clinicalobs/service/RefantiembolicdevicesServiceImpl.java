/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refantiembolicdevices;


/**
 * ServiceImpl object for domain model class Refantiembolicdevices.
 *
 * @see Refantiembolicdevices
 */
@Service("clinicalobs.RefantiembolicdevicesService")
@Validated
public class RefantiembolicdevicesServiceImpl implements RefantiembolicdevicesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefantiembolicdevicesServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefantiembolicdevicesDao")
    private WMGenericDao<Refantiembolicdevices, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refantiembolicdevices, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refantiembolicdevices create(Refantiembolicdevices refantiembolicdevices) {
        LOGGER.debug("Creating a new Refantiembolicdevices with information: {}", refantiembolicdevices);

        Refantiembolicdevices refantiembolicdevicesCreated = this.wmGenericDao.create(refantiembolicdevices);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refantiembolicdevicesCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refantiembolicdevices getById(Integer refantiembolicdevicesId) {
        LOGGER.debug("Finding Refantiembolicdevices by id: {}", refantiembolicdevicesId);
        return this.wmGenericDao.findById(refantiembolicdevicesId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refantiembolicdevices findById(Integer refantiembolicdevicesId) {
        LOGGER.debug("Finding Refantiembolicdevices by id: {}", refantiembolicdevicesId);
        try {
            return this.wmGenericDao.findById(refantiembolicdevicesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refantiembolicdevices found with id: {}", refantiembolicdevicesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refantiembolicdevices> findByMultipleIds(List<Integer> refantiembolicdevicesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refantiembolicdevices by ids: {}", refantiembolicdevicesIds);

        return this.wmGenericDao.findByMultipleIds(refantiembolicdevicesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refantiembolicdevices update(Refantiembolicdevices refantiembolicdevices) {
        LOGGER.debug("Updating Refantiembolicdevices with information: {}", refantiembolicdevices);

        this.wmGenericDao.update(refantiembolicdevices);
        this.wmGenericDao.refresh(refantiembolicdevices);

        return refantiembolicdevices;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refantiembolicdevices delete(Integer refantiembolicdevicesId) {
        LOGGER.debug("Deleting Refantiembolicdevices with id: {}", refantiembolicdevicesId);
        Refantiembolicdevices deleted = this.wmGenericDao.findById(refantiembolicdevicesId);
        if (deleted == null) {
            LOGGER.debug("No Refantiembolicdevices found with id: {}", refantiembolicdevicesId);
            throw new EntityNotFoundException(String.valueOf(refantiembolicdevicesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refantiembolicdevices refantiembolicdevices) {
        LOGGER.debug("Deleting Refantiembolicdevices with {}", refantiembolicdevices);
        this.wmGenericDao.delete(refantiembolicdevices);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refantiembolicdevices> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refantiembolicdevices");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refantiembolicdevices> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refantiembolicdevices");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refantiembolicdevices to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refantiembolicdevices to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}