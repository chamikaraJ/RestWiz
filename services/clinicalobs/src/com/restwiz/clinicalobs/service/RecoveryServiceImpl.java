/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Recovery;


/**
 * ServiceImpl object for domain model class Recovery.
 *
 * @see Recovery
 */
@Service("clinicalobs.RecoveryService")
@Validated
public class RecoveryServiceImpl implements RecoveryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RecoveryServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RecoveryDao")
    private WMGenericDao<Recovery, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Recovery, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Recovery create(Recovery recovery) {
        LOGGER.debug("Creating a new Recovery with information: {}", recovery);

        Recovery recoveryCreated = this.wmGenericDao.create(recovery);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(recoveryCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Recovery getById(Integer recoveryIdInstance) {
        LOGGER.debug("Finding Recovery by id: {}", recoveryIdInstance);
        return this.wmGenericDao.findById(recoveryIdInstance);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Recovery findById(Integer recoveryIdInstance) {
        LOGGER.debug("Finding Recovery by id: {}", recoveryIdInstance);
        try {
            return this.wmGenericDao.findById(recoveryIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Recovery found with id: {}", recoveryIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Recovery> findByMultipleIds(List<Integer> recoveryIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Recoveries by ids: {}", recoveryIdInstances);

        return this.wmGenericDao.findByMultipleIds(recoveryIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Recovery update(Recovery recovery) {
        LOGGER.debug("Updating Recovery with information: {}", recovery);

        this.wmGenericDao.update(recovery);
        this.wmGenericDao.refresh(recovery);

        return recovery;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Recovery delete(Integer recoveryIdInstance) {
        LOGGER.debug("Deleting Recovery with id: {}", recoveryIdInstance);
        Recovery deleted = this.wmGenericDao.findById(recoveryIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Recovery found with id: {}", recoveryIdInstance);
            throw new EntityNotFoundException(String.valueOf(recoveryIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Recovery recovery) {
        LOGGER.debug("Deleting Recovery with {}", recovery);
        this.wmGenericDao.delete(recovery);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Recovery> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Recoveries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Recovery> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Recoveries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Recovery to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Recovery to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}