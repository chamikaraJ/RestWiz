/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Clinicalevents;


/**
 * ServiceImpl object for domain model class Clinicalevents.
 *
 * @see Clinicalevents
 */
@Service("clinicalobs.ClinicaleventsService")
@Validated
public class ClinicaleventsServiceImpl implements ClinicaleventsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ClinicaleventsServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.ClinicaleventsDao")
    private WMGenericDao<Clinicalevents, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Clinicalevents, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Clinicalevents create(Clinicalevents clinicalevents) {
        LOGGER.debug("Creating a new Clinicalevents with information: {}", clinicalevents);

        Clinicalevents clinicaleventsCreated = this.wmGenericDao.create(clinicalevents);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(clinicaleventsCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Clinicalevents getById(Integer clinicaleventsId) {
        LOGGER.debug("Finding Clinicalevents by id: {}", clinicaleventsId);
        return this.wmGenericDao.findById(clinicaleventsId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Clinicalevents findById(Integer clinicaleventsId) {
        LOGGER.debug("Finding Clinicalevents by id: {}", clinicaleventsId);
        try {
            return this.wmGenericDao.findById(clinicaleventsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Clinicalevents found with id: {}", clinicaleventsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Clinicalevents> findByMultipleIds(List<Integer> clinicaleventsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Clinicalevents by ids: {}", clinicaleventsIds);

        return this.wmGenericDao.findByMultipleIds(clinicaleventsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Clinicalevents update(Clinicalevents clinicalevents) {
        LOGGER.debug("Updating Clinicalevents with information: {}", clinicalevents);

        this.wmGenericDao.update(clinicalevents);
        this.wmGenericDao.refresh(clinicalevents);

        return clinicalevents;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Clinicalevents delete(Integer clinicaleventsId) {
        LOGGER.debug("Deleting Clinicalevents with id: {}", clinicaleventsId);
        Clinicalevents deleted = this.wmGenericDao.findById(clinicaleventsId);
        if (deleted == null) {
            LOGGER.debug("No Clinicalevents found with id: {}", clinicaleventsId);
            throw new EntityNotFoundException(String.valueOf(clinicaleventsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Clinicalevents clinicalevents) {
        LOGGER.debug("Deleting Clinicalevents with {}", clinicalevents);
        this.wmGenericDao.delete(clinicalevents);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Clinicalevents> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Clinicalevents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Clinicalevents> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Clinicalevents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Clinicalevents to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Clinicalevents to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}