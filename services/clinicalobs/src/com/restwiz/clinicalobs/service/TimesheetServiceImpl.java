/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Timesheet;


/**
 * ServiceImpl object for domain model class Timesheet.
 *
 * @see Timesheet
 */
@Service("clinicalobs.TimesheetService")
@Validated
public class TimesheetServiceImpl implements TimesheetService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimesheetServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.TimesheetDao")
    private WMGenericDao<Timesheet, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Timesheet, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Timesheet create(Timesheet timesheet) {
        LOGGER.debug("Creating a new Timesheet with information: {}", timesheet);

        Timesheet timesheetCreated = this.wmGenericDao.create(timesheet);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(timesheetCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Timesheet getById(Integer timesheetId) {
        LOGGER.debug("Finding Timesheet by id: {}", timesheetId);
        return this.wmGenericDao.findById(timesheetId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Timesheet findById(Integer timesheetId) {
        LOGGER.debug("Finding Timesheet by id: {}", timesheetId);
        try {
            return this.wmGenericDao.findById(timesheetId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Timesheet found with id: {}", timesheetId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Timesheet> findByMultipleIds(List<Integer> timesheetIds, boolean orderedReturn) {
        LOGGER.debug("Finding Timesheets by ids: {}", timesheetIds);

        return this.wmGenericDao.findByMultipleIds(timesheetIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Timesheet update(Timesheet timesheet) {
        LOGGER.debug("Updating Timesheet with information: {}", timesheet);

        this.wmGenericDao.update(timesheet);
        this.wmGenericDao.refresh(timesheet);

        return timesheet;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Timesheet delete(Integer timesheetId) {
        LOGGER.debug("Deleting Timesheet with id: {}", timesheetId);
        Timesheet deleted = this.wmGenericDao.findById(timesheetId);
        if (deleted == null) {
            LOGGER.debug("No Timesheet found with id: {}", timesheetId);
            throw new EntityNotFoundException(String.valueOf(timesheetId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Timesheet timesheet) {
        LOGGER.debug("Deleting Timesheet with {}", timesheet);
        this.wmGenericDao.delete(timesheet);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Timesheet> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Timesheets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Timesheet> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Timesheets");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Timesheet to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Timesheet to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}