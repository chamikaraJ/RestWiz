/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refsignin;


/**
 * ServiceImpl object for domain model class Refsignin.
 *
 * @see Refsignin
 */
@Service("clinicalobs.RefsigninService")
@Validated
public class RefsigninServiceImpl implements RefsigninService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefsigninServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefsigninDao")
    private WMGenericDao<Refsignin, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refsignin, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refsignin create(Refsignin refsignin) {
        LOGGER.debug("Creating a new Refsignin with information: {}", refsignin);

        Refsignin refsigninCreated = this.wmGenericDao.create(refsignin);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refsigninCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refsignin getById(Integer refsigninId) {
        LOGGER.debug("Finding Refsignin by id: {}", refsigninId);
        return this.wmGenericDao.findById(refsigninId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refsignin findById(Integer refsigninId) {
        LOGGER.debug("Finding Refsignin by id: {}", refsigninId);
        try {
            return this.wmGenericDao.findById(refsigninId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refsignin found with id: {}", refsigninId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refsignin> findByMultipleIds(List<Integer> refsigninIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refsignins by ids: {}", refsigninIds);

        return this.wmGenericDao.findByMultipleIds(refsigninIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refsignin update(Refsignin refsignin) {
        LOGGER.debug("Updating Refsignin with information: {}", refsignin);

        this.wmGenericDao.update(refsignin);
        this.wmGenericDao.refresh(refsignin);

        return refsignin;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refsignin delete(Integer refsigninId) {
        LOGGER.debug("Deleting Refsignin with id: {}", refsigninId);
        Refsignin deleted = this.wmGenericDao.findById(refsigninId);
        if (deleted == null) {
            LOGGER.debug("No Refsignin found with id: {}", refsigninId);
            throw new EntityNotFoundException(String.valueOf(refsigninId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refsignin refsignin) {
        LOGGER.debug("Deleting Refsignin with {}", refsignin);
        this.wmGenericDao.delete(refsignin);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refsignin> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refsignins");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refsignin> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refsignins");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refsignin to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refsignin to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}