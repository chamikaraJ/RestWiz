/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refxrays;


/**
 * ServiceImpl object for domain model class Refxrays.
 *
 * @see Refxrays
 */
@Service("clinicalobs.RefxraysService")
@Validated
public class RefxraysServiceImpl implements RefxraysService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefxraysServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefxraysDao")
    private WMGenericDao<Refxrays, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refxrays, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refxrays create(Refxrays refxrays) {
        LOGGER.debug("Creating a new Refxrays with information: {}", refxrays);

        Refxrays refxraysCreated = this.wmGenericDao.create(refxrays);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refxraysCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refxrays getById(Integer refxraysId) {
        LOGGER.debug("Finding Refxrays by id: {}", refxraysId);
        return this.wmGenericDao.findById(refxraysId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refxrays findById(Integer refxraysId) {
        LOGGER.debug("Finding Refxrays by id: {}", refxraysId);
        try {
            return this.wmGenericDao.findById(refxraysId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refxrays found with id: {}", refxraysId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refxrays> findByMultipleIds(List<Integer> refxraysIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refxrays by ids: {}", refxraysIds);

        return this.wmGenericDao.findByMultipleIds(refxraysIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refxrays update(Refxrays refxrays) {
        LOGGER.debug("Updating Refxrays with information: {}", refxrays);

        this.wmGenericDao.update(refxrays);
        this.wmGenericDao.refresh(refxrays);

        return refxrays;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refxrays delete(Integer refxraysId) {
        LOGGER.debug("Deleting Refxrays with id: {}", refxraysId);
        Refxrays deleted = this.wmGenericDao.findById(refxraysId);
        if (deleted == null) {
            LOGGER.debug("No Refxrays found with id: {}", refxraysId);
            throw new EntityNotFoundException(String.valueOf(refxraysId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refxrays refxrays) {
        LOGGER.debug("Deleting Refxrays with {}", refxrays);
        this.wmGenericDao.delete(refxrays);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refxrays> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refxrays");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refxrays> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refxrays");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refxrays to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refxrays to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}