/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.DynamicMetaData;
import com.restwiz.clinicalobs.QsubCategory;


/**
 * ServiceImpl object for domain model class QsubCategory.
 *
 * @see QsubCategory
 */
@Service("clinicalobs.QsubCategoryService")
@Validated
public class QsubCategoryServiceImpl implements QsubCategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(QsubCategoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.DynamicMetaDataService")
    private DynamicMetaDataService dynamicMetaDataService;

    @Autowired
    @Qualifier("clinicalobs.QsubCategoryDao")
    private WMGenericDao<QsubCategory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QsubCategory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public QsubCategory create(QsubCategory qsubCategory) {
        LOGGER.debug("Creating a new QsubCategory with information: {}", qsubCategory);

        QsubCategory qsubCategoryCreated = this.wmGenericDao.create(qsubCategory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qsubCategoryCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public QsubCategory getById(Integer qsubcategoryId) {
        LOGGER.debug("Finding QsubCategory by id: {}", qsubcategoryId);
        return this.wmGenericDao.findById(qsubcategoryId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public QsubCategory findById(Integer qsubcategoryId) {
        LOGGER.debug("Finding QsubCategory by id: {}", qsubcategoryId);
        try {
            return this.wmGenericDao.findById(qsubcategoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QsubCategory found with id: {}", qsubcategoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<QsubCategory> findByMultipleIds(List<Integer> qsubcategoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding QsubCategories by ids: {}", qsubcategoryIds);

        return this.wmGenericDao.findByMultipleIds(qsubcategoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public QsubCategory update(QsubCategory qsubCategory) {
        LOGGER.debug("Updating QsubCategory with information: {}", qsubCategory);

        this.wmGenericDao.update(qsubCategory);
        this.wmGenericDao.refresh(qsubCategory);

        return qsubCategory;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public QsubCategory delete(Integer qsubcategoryId) {
        LOGGER.debug("Deleting QsubCategory with id: {}", qsubcategoryId);
        QsubCategory deleted = this.wmGenericDao.findById(qsubcategoryId);
        if (deleted == null) {
            LOGGER.debug("No QsubCategory found with id: {}", qsubcategoryId);
            throw new EntityNotFoundException(String.valueOf(qsubcategoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(QsubCategory qsubCategory) {
        LOGGER.debug("Deleting QsubCategory with {}", qsubCategory);
        this.wmGenericDao.delete(qsubCategory);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<QsubCategory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QsubCategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<QsubCategory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QsubCategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table QsubCategory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table QsubCategory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<DynamicMetaData> findAssociatedDynamicMetaDatas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated dynamicMetaDatas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("qsubCategory.id = '" + id + "'");

        return dynamicMetaDataService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DynamicMetaDataService instance
     */
    protected void setDynamicMetaDataService(DynamicMetaDataService service) {
        this.dynamicMetaDataService = service;
    }

}