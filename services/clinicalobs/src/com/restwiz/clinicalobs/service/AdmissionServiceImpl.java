/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Admission;


/**
 * ServiceImpl object for domain model class Admission.
 *
 * @see Admission
 */
@Service("clinicalobs.AdmissionService")
@Validated
public class AdmissionServiceImpl implements AdmissionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdmissionServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.AdmissionDao")
    private WMGenericDao<Admission, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Admission, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Admission create(Admission admission) {
        LOGGER.debug("Creating a new Admission with information: {}", admission);

        Admission admissionCreated = this.wmGenericDao.create(admission);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(admissionCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Admission getById(Integer admissionId) {
        LOGGER.debug("Finding Admission by id: {}", admissionId);
        return this.wmGenericDao.findById(admissionId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Admission findById(Integer admissionId) {
        LOGGER.debug("Finding Admission by id: {}", admissionId);
        try {
            return this.wmGenericDao.findById(admissionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Admission found with id: {}", admissionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Admission> findByMultipleIds(List<Integer> admissionIds, boolean orderedReturn) {
        LOGGER.debug("Finding Admissions by ids: {}", admissionIds);

        return this.wmGenericDao.findByMultipleIds(admissionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Admission update(Admission admission) {
        LOGGER.debug("Updating Admission with information: {}", admission);

        this.wmGenericDao.update(admission);
        this.wmGenericDao.refresh(admission);

        return admission;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Admission delete(Integer admissionId) {
        LOGGER.debug("Deleting Admission with id: {}", admissionId);
        Admission deleted = this.wmGenericDao.findById(admissionId);
        if (deleted == null) {
            LOGGER.debug("No Admission found with id: {}", admissionId);
            throw new EntityNotFoundException(String.valueOf(admissionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Admission admission) {
        LOGGER.debug("Deleting Admission with {}", admission);
        this.wmGenericDao.delete(admission);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Admission> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Admissions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Admission> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Admissions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Admission to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Admission to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}