/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.DynamicHtmlanswer;


/**
 * ServiceImpl object for domain model class DynamicHtmlanswer.
 *
 * @see DynamicHtmlanswer
 */
@Service("clinicalobs.DynamicHtmlanswerService")
@Validated
public class DynamicHtmlanswerServiceImpl implements DynamicHtmlanswerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicHtmlanswerServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.DynamicHtmlanswerDao")
    private WMGenericDao<DynamicHtmlanswer, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DynamicHtmlanswer, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public DynamicHtmlanswer create(DynamicHtmlanswer dynamicHtmlanswer) {
        LOGGER.debug("Creating a new DynamicHtmlanswer with information: {}", dynamicHtmlanswer);

        DynamicHtmlanswer dynamicHtmlanswerCreated = this.wmGenericDao.create(dynamicHtmlanswer);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(dynamicHtmlanswerCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public DynamicHtmlanswer getById(Integer dynamichtmlanswerId) {
        LOGGER.debug("Finding DynamicHtmlanswer by id: {}", dynamichtmlanswerId);
        return this.wmGenericDao.findById(dynamichtmlanswerId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public DynamicHtmlanswer findById(Integer dynamichtmlanswerId) {
        LOGGER.debug("Finding DynamicHtmlanswer by id: {}", dynamichtmlanswerId);
        try {
            return this.wmGenericDao.findById(dynamichtmlanswerId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DynamicHtmlanswer found with id: {}", dynamichtmlanswerId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<DynamicHtmlanswer> findByMultipleIds(List<Integer> dynamichtmlanswerIds, boolean orderedReturn) {
        LOGGER.debug("Finding DynamicHtmlanswers by ids: {}", dynamichtmlanswerIds);

        return this.wmGenericDao.findByMultipleIds(dynamichtmlanswerIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public DynamicHtmlanswer update(DynamicHtmlanswer dynamicHtmlanswer) {
        LOGGER.debug("Updating DynamicHtmlanswer with information: {}", dynamicHtmlanswer);

        this.wmGenericDao.update(dynamicHtmlanswer);
        this.wmGenericDao.refresh(dynamicHtmlanswer);

        return dynamicHtmlanswer;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public DynamicHtmlanswer delete(Integer dynamichtmlanswerId) {
        LOGGER.debug("Deleting DynamicHtmlanswer with id: {}", dynamichtmlanswerId);
        DynamicHtmlanswer deleted = this.wmGenericDao.findById(dynamichtmlanswerId);
        if (deleted == null) {
            LOGGER.debug("No DynamicHtmlanswer found with id: {}", dynamichtmlanswerId);
            throw new EntityNotFoundException(String.valueOf(dynamichtmlanswerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(DynamicHtmlanswer dynamicHtmlanswer) {
        LOGGER.debug("Deleting DynamicHtmlanswer with {}", dynamicHtmlanswer);
        this.wmGenericDao.delete(dynamicHtmlanswer);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<DynamicHtmlanswer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DynamicHtmlanswers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<DynamicHtmlanswer> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DynamicHtmlanswers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table DynamicHtmlanswer to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table DynamicHtmlanswer to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}