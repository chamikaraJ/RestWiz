/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refdiathermy;


/**
 * ServiceImpl object for domain model class Refdiathermy.
 *
 * @see Refdiathermy
 */
@Service("clinicalobs.RefdiathermyService")
@Validated
public class RefdiathermyServiceImpl implements RefdiathermyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefdiathermyServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefdiathermyDao")
    private WMGenericDao<Refdiathermy, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refdiathermy, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refdiathermy create(Refdiathermy refdiathermy) {
        LOGGER.debug("Creating a new Refdiathermy with information: {}", refdiathermy);

        Refdiathermy refdiathermyCreated = this.wmGenericDao.create(refdiathermy);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refdiathermyCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refdiathermy getById(Integer refdiathermyId) {
        LOGGER.debug("Finding Refdiathermy by id: {}", refdiathermyId);
        return this.wmGenericDao.findById(refdiathermyId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refdiathermy findById(Integer refdiathermyId) {
        LOGGER.debug("Finding Refdiathermy by id: {}", refdiathermyId);
        try {
            return this.wmGenericDao.findById(refdiathermyId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refdiathermy found with id: {}", refdiathermyId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refdiathermy> findByMultipleIds(List<Integer> refdiathermyIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refdiathermies by ids: {}", refdiathermyIds);

        return this.wmGenericDao.findByMultipleIds(refdiathermyIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refdiathermy update(Refdiathermy refdiathermy) {
        LOGGER.debug("Updating Refdiathermy with information: {}", refdiathermy);

        this.wmGenericDao.update(refdiathermy);
        this.wmGenericDao.refresh(refdiathermy);

        return refdiathermy;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refdiathermy delete(Integer refdiathermyId) {
        LOGGER.debug("Deleting Refdiathermy with id: {}", refdiathermyId);
        Refdiathermy deleted = this.wmGenericDao.findById(refdiathermyId);
        if (deleted == null) {
            LOGGER.debug("No Refdiathermy found with id: {}", refdiathermyId);
            throw new EntityNotFoundException(String.valueOf(refdiathermyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refdiathermy refdiathermy) {
        LOGGER.debug("Deleting Refdiathermy with {}", refdiathermy);
        this.wmGenericDao.delete(refdiathermy);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refdiathermy> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refdiathermies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refdiathermy> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refdiathermies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refdiathermy to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refdiathermy to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}