/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.PtProcedure;
import com.restwiz.clinicalobs.RefProcedure;


/**
 * ServiceImpl object for domain model class RefProcedure.
 *
 * @see RefProcedure
 */
@Service("clinicalobs.RefProcedureService")
@Validated
public class RefProcedureServiceImpl implements RefProcedureService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefProcedureServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.PtProcedureService")
    private PtProcedureService ptProcedureService;

    @Autowired
    @Qualifier("clinicalobs.RefProcedureDao")
    private WMGenericDao<RefProcedure, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefProcedure, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public RefProcedure create(RefProcedure refProcedure) {
        LOGGER.debug("Creating a new RefProcedure with information: {}", refProcedure);

        RefProcedure refProcedureCreated = this.wmGenericDao.create(refProcedure);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refProcedureCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public RefProcedure getById(Integer refprocedureId) {
        LOGGER.debug("Finding RefProcedure by id: {}", refprocedureId);
        return this.wmGenericDao.findById(refprocedureId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public RefProcedure findById(Integer refprocedureId) {
        LOGGER.debug("Finding RefProcedure by id: {}", refprocedureId);
        try {
            return this.wmGenericDao.findById(refprocedureId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RefProcedure found with id: {}", refprocedureId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<RefProcedure> findByMultipleIds(List<Integer> refprocedureIds, boolean orderedReturn) {
        LOGGER.debug("Finding RefProcedures by ids: {}", refprocedureIds);

        return this.wmGenericDao.findByMultipleIds(refprocedureIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public RefProcedure update(RefProcedure refProcedure) {
        LOGGER.debug("Updating RefProcedure with information: {}", refProcedure);

        this.wmGenericDao.update(refProcedure);
        this.wmGenericDao.refresh(refProcedure);

        return refProcedure;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public RefProcedure delete(Integer refprocedureId) {
        LOGGER.debug("Deleting RefProcedure with id: {}", refprocedureId);
        RefProcedure deleted = this.wmGenericDao.findById(refprocedureId);
        if (deleted == null) {
            LOGGER.debug("No RefProcedure found with id: {}", refprocedureId);
            throw new EntityNotFoundException(String.valueOf(refprocedureId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(RefProcedure refProcedure) {
        LOGGER.debug("Deleting RefProcedure with {}", refProcedure);
        this.wmGenericDao.delete(refProcedure);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<RefProcedure> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefProcedures");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<RefProcedure> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefProcedures");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table RefProcedure to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table RefProcedure to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtProcedure> findAssociatedPtProcedures(Integer idno, Pageable pageable) {
        LOGGER.debug("Fetching all associated ptProcedures");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("refProcedure.idno = '" + idno + "'");

        return ptProcedureService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PtProcedureService instance
     */
    protected void setPtProcedureService(PtProcedureService service) {
        this.ptProcedureService = service;
    }

}