/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Anaesthetic;


/**
 * ServiceImpl object for domain model class Anaesthetic.
 *
 * @see Anaesthetic
 */
@Service("clinicalobs.AnaestheticService")
@Validated
public class AnaestheticServiceImpl implements AnaestheticService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnaestheticServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.AnaestheticDao")
    private WMGenericDao<Anaesthetic, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Anaesthetic, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Anaesthetic create(Anaesthetic anaesthetic) {
        LOGGER.debug("Creating a new Anaesthetic with information: {}", anaesthetic);

        Anaesthetic anaestheticCreated = this.wmGenericDao.create(anaesthetic);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(anaestheticCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Anaesthetic getById(Integer anaestheticId) {
        LOGGER.debug("Finding Anaesthetic by id: {}", anaestheticId);
        return this.wmGenericDao.findById(anaestheticId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Anaesthetic findById(Integer anaestheticId) {
        LOGGER.debug("Finding Anaesthetic by id: {}", anaestheticId);
        try {
            return this.wmGenericDao.findById(anaestheticId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Anaesthetic found with id: {}", anaestheticId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Anaesthetic> findByMultipleIds(List<Integer> anaestheticIds, boolean orderedReturn) {
        LOGGER.debug("Finding Anaesthetics by ids: {}", anaestheticIds);

        return this.wmGenericDao.findByMultipleIds(anaestheticIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Anaesthetic update(Anaesthetic anaesthetic) {
        LOGGER.debug("Updating Anaesthetic with information: {}", anaesthetic);

        this.wmGenericDao.update(anaesthetic);
        this.wmGenericDao.refresh(anaesthetic);

        return anaesthetic;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Anaesthetic delete(Integer anaestheticId) {
        LOGGER.debug("Deleting Anaesthetic with id: {}", anaestheticId);
        Anaesthetic deleted = this.wmGenericDao.findById(anaestheticId);
        if (deleted == null) {
            LOGGER.debug("No Anaesthetic found with id: {}", anaestheticId);
            throw new EntityNotFoundException(String.valueOf(anaestheticId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Anaesthetic anaesthetic) {
        LOGGER.debug("Deleting Anaesthetic with {}", anaesthetic);
        this.wmGenericDao.delete(anaesthetic);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Anaesthetic> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Anaesthetics");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Anaesthetic> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Anaesthetics");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Anaesthetic to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Anaesthetic to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}