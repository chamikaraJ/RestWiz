/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.DynamicMetaData;
import com.restwiz.clinicalobs.Qcategory;
import com.restwiz.clinicalobs.QsubCategory;


/**
 * ServiceImpl object for domain model class Qcategory.
 *
 * @see Qcategory
 */
@Service("clinicalobs.QcategoryService")
@Validated
public class QcategoryServiceImpl implements QcategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(QcategoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.QsubCategoryService")
    private QsubCategoryService qsubCategoryService;

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.DynamicMetaDataService")
    private DynamicMetaDataService dynamicMetaDataService;

    @Autowired
    @Qualifier("clinicalobs.QcategoryDao")
    private WMGenericDao<Qcategory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Qcategory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Qcategory create(Qcategory qcategory) {
        LOGGER.debug("Creating a new Qcategory with information: {}", qcategory);

        Qcategory qcategoryCreated = this.wmGenericDao.create(qcategory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qcategoryCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Qcategory getById(Integer qcategoryId) {
        LOGGER.debug("Finding Qcategory by id: {}", qcategoryId);
        return this.wmGenericDao.findById(qcategoryId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Qcategory findById(Integer qcategoryId) {
        LOGGER.debug("Finding Qcategory by id: {}", qcategoryId);
        try {
            return this.wmGenericDao.findById(qcategoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Qcategory found with id: {}", qcategoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Qcategory> findByMultipleIds(List<Integer> qcategoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding Qcategories by ids: {}", qcategoryIds);

        return this.wmGenericDao.findByMultipleIds(qcategoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Qcategory update(Qcategory qcategory) {
        LOGGER.debug("Updating Qcategory with information: {}", qcategory);

        this.wmGenericDao.update(qcategory);
        this.wmGenericDao.refresh(qcategory);

        return qcategory;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Qcategory delete(Integer qcategoryId) {
        LOGGER.debug("Deleting Qcategory with id: {}", qcategoryId);
        Qcategory deleted = this.wmGenericDao.findById(qcategoryId);
        if (deleted == null) {
            LOGGER.debug("No Qcategory found with id: {}", qcategoryId);
            throw new EntityNotFoundException(String.valueOf(qcategoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Qcategory qcategory) {
        LOGGER.debug("Deleting Qcategory with {}", qcategory);
        this.wmGenericDao.delete(qcategory);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Qcategory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Qcategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Qcategory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Qcategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Qcategory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Qcategory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<QsubCategory> findAssociatedQsubCategories(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated qsubCategories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("qcategory.id = '" + id + "'");

        return qsubCategoryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<DynamicMetaData> findAssociatedDynamicMetaDatas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated dynamicMetaDatas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("qcategory.id = '" + id + "'");

        return dynamicMetaDataService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service QsubCategoryService instance
     */
    protected void setQsubCategoryService(QsubCategoryService service) {
        this.qsubCategoryService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DynamicMetaDataService instance
     */
    protected void setDynamicMetaDataService(DynamicMetaDataService service) {
        this.dynamicMetaDataService = service;
    }

}