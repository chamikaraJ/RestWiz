/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.AnaestheticIvdrug;
import com.restwiz.clinicalobs.Drug;
import com.restwiz.clinicalobs.Proceduremedications;


/**
 * ServiceImpl object for domain model class Drug.
 *
 * @see Drug
 */
@Service("clinicalobs.DrugService")
@Validated
public class DrugServiceImpl implements DrugService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DrugServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.ProceduremedicationsService")
    private ProceduremedicationsService proceduremedicationsService;

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.AnaestheticIvdrugService")
    private AnaestheticIvdrugService anaestheticIvdrugService;

    @Autowired
    @Qualifier("clinicalobs.DrugDao")
    private WMGenericDao<Drug, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Drug, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Drug create(Drug drug) {
        LOGGER.debug("Creating a new Drug with information: {}", drug);

        Drug drugCreated = this.wmGenericDao.create(drug);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(drugCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Drug getById(Integer drugId) {
        LOGGER.debug("Finding Drug by id: {}", drugId);
        return this.wmGenericDao.findById(drugId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Drug findById(Integer drugId) {
        LOGGER.debug("Finding Drug by id: {}", drugId);
        try {
            return this.wmGenericDao.findById(drugId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Drug found with id: {}", drugId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Drug> findByMultipleIds(List<Integer> drugIds, boolean orderedReturn) {
        LOGGER.debug("Finding Drugs by ids: {}", drugIds);

        return this.wmGenericDao.findByMultipleIds(drugIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Drug update(Drug drug) {
        LOGGER.debug("Updating Drug with information: {}", drug);

        this.wmGenericDao.update(drug);
        this.wmGenericDao.refresh(drug);

        return drug;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Drug delete(Integer drugId) {
        LOGGER.debug("Deleting Drug with id: {}", drugId);
        Drug deleted = this.wmGenericDao.findById(drugId);
        if (deleted == null) {
            LOGGER.debug("No Drug found with id: {}", drugId);
            throw new EntityNotFoundException(String.valueOf(drugId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Drug drug) {
        LOGGER.debug("Deleting Drug with {}", drug);
        this.wmGenericDao.delete(drug);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Drug> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Drugs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Drug> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Drugs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Drug to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Drug to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<AnaestheticIvdrug> findAssociatedAnaestheticIvdrugs(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated anaestheticIvdrugs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("drug.id = '" + id + "'");

        return anaestheticIvdrugService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Proceduremedications> findAssociatedProceduremedicationses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated proceduremedicationses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("drug.id = '" + id + "'");

        return proceduremedicationsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProceduremedicationsService instance
     */
    protected void setProceduremedicationsService(ProceduremedicationsService service) {
        this.proceduremedicationsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AnaestheticIvdrugService instance
     */
    protected void setAnaestheticIvdrugService(AnaestheticIvdrugService service) {
        this.anaestheticIvdrugService = service;
    }

}