/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refpositioningaids;

/**
 * Service object for domain model class {@link Refpositioningaids}.
 */
public interface RefpositioningaidsService {

    /**
     * Creates a new Refpositioningaids. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Refpositioningaids if any.
     *
     * @param refpositioningaids Details of the Refpositioningaids to be created; value cannot be null.
     * @return The newly created Refpositioningaids.
     */
    Refpositioningaids create(@Valid Refpositioningaids refpositioningaids);


	/**
     * Returns Refpositioningaids by given id if exists.
     *
     * @param refpositioningaidsId The id of the Refpositioningaids to get; value cannot be null.
     * @return Refpositioningaids associated with the given refpositioningaidsId.
	 * @throws EntityNotFoundException If no Refpositioningaids is found.
     */
    Refpositioningaids getById(Integer refpositioningaidsId);

    /**
     * Find and return the Refpositioningaids by given id if exists, returns null otherwise.
     *
     * @param refpositioningaidsId The id of the Refpositioningaids to get; value cannot be null.
     * @return Refpositioningaids associated with the given refpositioningaidsId.
     */
    Refpositioningaids findById(Integer refpositioningaidsId);

	/**
     * Find and return the list of Refpositioningaids by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param refpositioningaidsIds The id's of the Refpositioningaids to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Refpositioningaids associated with the given refpositioningaidsIds.
     */
    List<Refpositioningaids> findByMultipleIds(List<Integer> refpositioningaidsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Refpositioningaids. It replaces all fields of the existing Refpositioningaids with the given refpositioningaids.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Refpositioningaids if any.
     *
     * @param refpositioningaids The details of the Refpositioningaids to be updated; value cannot be null.
     * @return The updated Refpositioningaids.
     * @throws EntityNotFoundException if no Refpositioningaids is found with given input.
     */
    Refpositioningaids update(@Valid Refpositioningaids refpositioningaids);

    /**
     * Deletes an existing Refpositioningaids with the given id.
     *
     * @param refpositioningaidsId The id of the Refpositioningaids to be deleted; value cannot be null.
     * @return The deleted Refpositioningaids.
     * @throws EntityNotFoundException if no Refpositioningaids found with the given id.
     */
    Refpositioningaids delete(Integer refpositioningaidsId);

    /**
     * Deletes an existing Refpositioningaids with the given object.
     *
     * @param refpositioningaids The instance of the Refpositioningaids to be deleted; value cannot be null.
     */
    void delete(Refpositioningaids refpositioningaids);

    /**
     * Find all Refpositioningaids matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Refpositioningaids.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Refpositioningaids> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Refpositioningaids matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Refpositioningaids.
     *
     * @see Pageable
     * @see Page
     */
    Page<Refpositioningaids> findAll(String query, Pageable pageable);

    /**
     * Exports all Refpositioningaids matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Refpositioningaids matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Refpositioningaids in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Refpositioningaids.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}