/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refwarmingdevices;


/**
 * ServiceImpl object for domain model class Refwarmingdevices.
 *
 * @see Refwarmingdevices
 */
@Service("clinicalobs.RefwarmingdevicesService")
@Validated
public class RefwarmingdevicesServiceImpl implements RefwarmingdevicesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefwarmingdevicesServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefwarmingdevicesDao")
    private WMGenericDao<Refwarmingdevices, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refwarmingdevices, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refwarmingdevices create(Refwarmingdevices refwarmingdevices) {
        LOGGER.debug("Creating a new Refwarmingdevices with information: {}", refwarmingdevices);

        Refwarmingdevices refwarmingdevicesCreated = this.wmGenericDao.create(refwarmingdevices);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refwarmingdevicesCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refwarmingdevices getById(Integer refwarmingdevicesId) {
        LOGGER.debug("Finding Refwarmingdevices by id: {}", refwarmingdevicesId);
        return this.wmGenericDao.findById(refwarmingdevicesId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refwarmingdevices findById(Integer refwarmingdevicesId) {
        LOGGER.debug("Finding Refwarmingdevices by id: {}", refwarmingdevicesId);
        try {
            return this.wmGenericDao.findById(refwarmingdevicesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refwarmingdevices found with id: {}", refwarmingdevicesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refwarmingdevices> findByMultipleIds(List<Integer> refwarmingdevicesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refwarmingdevices by ids: {}", refwarmingdevicesIds);

        return this.wmGenericDao.findByMultipleIds(refwarmingdevicesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refwarmingdevices update(Refwarmingdevices refwarmingdevices) {
        LOGGER.debug("Updating Refwarmingdevices with information: {}", refwarmingdevices);

        this.wmGenericDao.update(refwarmingdevices);
        this.wmGenericDao.refresh(refwarmingdevices);

        return refwarmingdevices;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refwarmingdevices delete(Integer refwarmingdevicesId) {
        LOGGER.debug("Deleting Refwarmingdevices with id: {}", refwarmingdevicesId);
        Refwarmingdevices deleted = this.wmGenericDao.findById(refwarmingdevicesId);
        if (deleted == null) {
            LOGGER.debug("No Refwarmingdevices found with id: {}", refwarmingdevicesId);
            throw new EntityNotFoundException(String.valueOf(refwarmingdevicesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refwarmingdevices refwarmingdevices) {
        LOGGER.debug("Deleting Refwarmingdevices with {}", refwarmingdevices);
        this.wmGenericDao.delete(refwarmingdevices);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refwarmingdevices> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refwarmingdevices");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refwarmingdevices> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refwarmingdevices");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refwarmingdevices to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refwarmingdevices to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}