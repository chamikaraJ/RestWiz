/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Admission;
import com.restwiz.clinicalobs.Anaesthetic;
import com.restwiz.clinicalobs.AnaestheticIvdrug;
import com.restwiz.clinicalobs.AnaestheticIvfluid;
import com.restwiz.clinicalobs.AnaestheticRecord;
import com.restwiz.clinicalobs.Dischargeassessment;
import com.restwiz.clinicalobs.DynamicHtmlanswer;
import com.restwiz.clinicalobs.DynamicQandA;
import com.restwiz.clinicalobs.Events;
import com.restwiz.clinicalobs.Obs;
import com.restwiz.clinicalobs.Obspatients;
import com.restwiz.clinicalobs.ObsptStatus;
import com.restwiz.clinicalobs.Procedureassessment;
import com.restwiz.clinicalobs.Proceduremedications;
import com.restwiz.clinicalobs.PtAlert;
import com.restwiz.clinicalobs.PtAllergy;
import com.restwiz.clinicalobs.PtDocument;
import com.restwiz.clinicalobs.PtProcedure;
import com.restwiz.clinicalobs.Recovery;
import com.restwiz.clinicalobs.Surgchecklist;

/**
 * Service object for domain model class {@link Obspatients}.
 */
public interface ObspatientsService {

    /**
     * Creates a new Obspatients. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Obspatients if any.
     *
     * @param obspatients Details of the Obspatients to be created; value cannot be null.
     * @return The newly created Obspatients.
     */
    Obspatients create(@Valid Obspatients obspatients);


	/**
     * Returns Obspatients by given id if exists.
     *
     * @param obspatientsId The id of the Obspatients to get; value cannot be null.
     * @return Obspatients associated with the given obspatientsId.
	 * @throws EntityNotFoundException If no Obspatients is found.
     */
    Obspatients getById(Integer obspatientsId);

    /**
     * Find and return the Obspatients by given id if exists, returns null otherwise.
     *
     * @param obspatientsId The id of the Obspatients to get; value cannot be null.
     * @return Obspatients associated with the given obspatientsId.
     */
    Obspatients findById(Integer obspatientsId);

	/**
     * Find and return the list of Obspatients by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param obspatientsIds The id's of the Obspatients to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Obspatients associated with the given obspatientsIds.
     */
    List<Obspatients> findByMultipleIds(List<Integer> obspatientsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Obspatients. It replaces all fields of the existing Obspatients with the given obspatients.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Obspatients if any.
     *
     * @param obspatients The details of the Obspatients to be updated; value cannot be null.
     * @return The updated Obspatients.
     * @throws EntityNotFoundException if no Obspatients is found with given input.
     */
    Obspatients update(@Valid Obspatients obspatients);

    /**
     * Deletes an existing Obspatients with the given id.
     *
     * @param obspatientsId The id of the Obspatients to be deleted; value cannot be null.
     * @return The deleted Obspatients.
     * @throws EntityNotFoundException if no Obspatients found with the given id.
     */
    Obspatients delete(Integer obspatientsId);

    /**
     * Deletes an existing Obspatients with the given object.
     *
     * @param obspatients The instance of the Obspatients to be deleted; value cannot be null.
     */
    void delete(Obspatients obspatients);

    /**
     * Find all Obspatients matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Obspatients.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Obspatients> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Obspatients matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Obspatients.
     *
     * @see Pageable
     * @see Page
     */
    Page<Obspatients> findAll(String query, Pageable pageable);

    /**
     * Exports all Obspatients matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Obspatients matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Obspatients in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Obspatients.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated dynamicHtmlanswers for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DynamicHtmlanswer instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DynamicHtmlanswer> findAssociatedDynamicHtmlanswers(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated obsptStatuses for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated ObsptStatus instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<ObsptStatus> findAssociatedObsptStatuses(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated admissions for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Admission instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Admission> findAssociatedAdmissions(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated anaesthetics for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Anaesthetic instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Anaesthetic> findAssociatedAnaesthetics(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated anaestheticIvdrugs for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnaestheticIvdrug instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnaestheticIvdrug> findAssociatedAnaestheticIvdrugs(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated anaestheticIvfluids for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnaestheticIvfluid instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnaestheticIvfluid> findAssociatedAnaestheticIvfluids(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated anaestheticRecords for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnaestheticRecord instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnaestheticRecord> findAssociatedAnaestheticRecords(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated dischargeassessments for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Dischargeassessment instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Dischargeassessment> findAssociatedDischargeassessments(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated dynamicQandAs for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DynamicQandA instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DynamicQandA> findAssociatedDynamicQandAs(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated eventses for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Events instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Events> findAssociatedEventses(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated obsesForObsptid for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Obs instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Obs> findAssociatedObsesForObsptid(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated obsesForObsptidRelation for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Obs instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Obs> findAssociatedObsesForObsptidRelation(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated procedureassessments for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Procedureassessment instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Procedureassessment> findAssociatedProcedureassessments(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated proceduremedicationses for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Proceduremedications instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Proceduremedications> findAssociatedProceduremedicationses(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated ptAlerts for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PtAlert instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PtAlert> findAssociatedPtAlerts(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated ptAllergies for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PtAllergy instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PtAllergy> findAssociatedPtAllergies(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated ptDocuments for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PtDocument instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PtDocument> findAssociatedPtDocuments(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated ptProcedures for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PtProcedure instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PtProcedure> findAssociatedPtProcedures(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated recoveries for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Recovery instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Recovery> findAssociatedRecoveries(Integer obsptid, Pageable pageable);

    /*
     * Returns the associated surgchecklists for given Obspatients id.
     *
     * @param obsptid value of obsptid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Surgchecklist instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Surgchecklist> findAssociatedSurgchecklists(Integer obsptid, Pageable pageable);

}