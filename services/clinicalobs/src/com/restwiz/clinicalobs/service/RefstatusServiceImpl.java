/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.ObsptStatus;
import com.restwiz.clinicalobs.Refstatus;


/**
 * ServiceImpl object for domain model class Refstatus.
 *
 * @see Refstatus
 */
@Service("clinicalobs.RefstatusService")
@Validated
public class RefstatusServiceImpl implements RefstatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefstatusServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.ObsptStatusService")
    private ObsptStatusService obsptStatusService;

    @Autowired
    @Qualifier("clinicalobs.RefstatusDao")
    private WMGenericDao<Refstatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refstatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refstatus create(Refstatus refstatus) {
        LOGGER.debug("Creating a new Refstatus with information: {}", refstatus);

        Refstatus refstatusCreated = this.wmGenericDao.create(refstatus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refstatusCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refstatus getById(Integer refstatusId) {
        LOGGER.debug("Finding Refstatus by id: {}", refstatusId);
        return this.wmGenericDao.findById(refstatusId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refstatus findById(Integer refstatusId) {
        LOGGER.debug("Finding Refstatus by id: {}", refstatusId);
        try {
            return this.wmGenericDao.findById(refstatusId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refstatus found with id: {}", refstatusId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refstatus> findByMultipleIds(List<Integer> refstatusIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refstatuses by ids: {}", refstatusIds);

        return this.wmGenericDao.findByMultipleIds(refstatusIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refstatus update(Refstatus refstatus) {
        LOGGER.debug("Updating Refstatus with information: {}", refstatus);

        this.wmGenericDao.update(refstatus);
        this.wmGenericDao.refresh(refstatus);

        return refstatus;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refstatus delete(Integer refstatusId) {
        LOGGER.debug("Deleting Refstatus with id: {}", refstatusId);
        Refstatus deleted = this.wmGenericDao.findById(refstatusId);
        if (deleted == null) {
            LOGGER.debug("No Refstatus found with id: {}", refstatusId);
            throw new EntityNotFoundException(String.valueOf(refstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refstatus refstatus) {
        LOGGER.debug("Deleting Refstatus with {}", refstatus);
        this.wmGenericDao.delete(refstatus);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refstatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refstatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refstatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refstatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refstatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refstatus to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<ObsptStatus> findAssociatedObsptStatuses(Integer idno, Pageable pageable) {
        LOGGER.debug("Fetching all associated obsptStatuses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("refstatus.idno = '" + idno + "'");

        return obsptStatusService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ObsptStatusService instance
     */
    protected void setObsptStatusService(ObsptStatusService service) {
        this.obsptStatusService = service;
    }

}