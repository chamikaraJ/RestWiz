/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refmedications;


/**
 * ServiceImpl object for domain model class Refmedications.
 *
 * @see Refmedications
 */
@Service("clinicalobs.RefmedicationsService")
@Validated
public class RefmedicationsServiceImpl implements RefmedicationsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefmedicationsServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefmedicationsDao")
    private WMGenericDao<Refmedications, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refmedications, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refmedications create(Refmedications refmedications) {
        LOGGER.debug("Creating a new Refmedications with information: {}", refmedications);

        Refmedications refmedicationsCreated = this.wmGenericDao.create(refmedications);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refmedicationsCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refmedications getById(Integer refmedicationsId) {
        LOGGER.debug("Finding Refmedications by id: {}", refmedicationsId);
        return this.wmGenericDao.findById(refmedicationsId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refmedications findById(Integer refmedicationsId) {
        LOGGER.debug("Finding Refmedications by id: {}", refmedicationsId);
        try {
            return this.wmGenericDao.findById(refmedicationsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refmedications found with id: {}", refmedicationsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refmedications> findByMultipleIds(List<Integer> refmedicationsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refmedications by ids: {}", refmedicationsIds);

        return this.wmGenericDao.findByMultipleIds(refmedicationsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refmedications update(Refmedications refmedications) {
        LOGGER.debug("Updating Refmedications with information: {}", refmedications);

        this.wmGenericDao.update(refmedications);
        this.wmGenericDao.refresh(refmedications);

        return refmedications;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refmedications delete(Integer refmedicationsId) {
        LOGGER.debug("Deleting Refmedications with id: {}", refmedicationsId);
        Refmedications deleted = this.wmGenericDao.findById(refmedicationsId);
        if (deleted == null) {
            LOGGER.debug("No Refmedications found with id: {}", refmedicationsId);
            throw new EntityNotFoundException(String.valueOf(refmedicationsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refmedications refmedications) {
        LOGGER.debug("Deleting Refmedications with {}", refmedications);
        this.wmGenericDao.delete(refmedications);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refmedications> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refmedications");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refmedications> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refmedications");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refmedications to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refmedications to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}