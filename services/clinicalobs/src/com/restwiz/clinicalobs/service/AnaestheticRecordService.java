/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.AnaestheticIvdrug;
import com.restwiz.clinicalobs.AnaestheticIvfluid;
import com.restwiz.clinicalobs.AnaestheticRecord;
import com.restwiz.clinicalobs.Obs;

/**
 * Service object for domain model class {@link AnaestheticRecord}.
 */
public interface AnaestheticRecordService {

    /**
     * Creates a new AnaestheticRecord. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AnaestheticRecord if any.
     *
     * @param anaestheticRecord Details of the AnaestheticRecord to be created; value cannot be null.
     * @return The newly created AnaestheticRecord.
     */
    AnaestheticRecord create(@Valid AnaestheticRecord anaestheticRecord);


	/**
     * Returns AnaestheticRecord by given id if exists.
     *
     * @param anaestheticrecordId The id of the AnaestheticRecord to get; value cannot be null.
     * @return AnaestheticRecord associated with the given anaestheticrecordId.
	 * @throws EntityNotFoundException If no AnaestheticRecord is found.
     */
    AnaestheticRecord getById(Integer anaestheticrecordId);

    /**
     * Find and return the AnaestheticRecord by given id if exists, returns null otherwise.
     *
     * @param anaestheticrecordId The id of the AnaestheticRecord to get; value cannot be null.
     * @return AnaestheticRecord associated with the given anaestheticrecordId.
     */
    AnaestheticRecord findById(Integer anaestheticrecordId);

	/**
     * Find and return the list of AnaestheticRecords by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param anaestheticrecordIds The id's of the AnaestheticRecord to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AnaestheticRecords associated with the given anaestheticrecordIds.
     */
    List<AnaestheticRecord> findByMultipleIds(List<Integer> anaestheticrecordIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AnaestheticRecord. It replaces all fields of the existing AnaestheticRecord with the given anaestheticRecord.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AnaestheticRecord if any.
     *
     * @param anaestheticRecord The details of the AnaestheticRecord to be updated; value cannot be null.
     * @return The updated AnaestheticRecord.
     * @throws EntityNotFoundException if no AnaestheticRecord is found with given input.
     */
    AnaestheticRecord update(@Valid AnaestheticRecord anaestheticRecord);

    /**
     * Deletes an existing AnaestheticRecord with the given id.
     *
     * @param anaestheticrecordId The id of the AnaestheticRecord to be deleted; value cannot be null.
     * @return The deleted AnaestheticRecord.
     * @throws EntityNotFoundException if no AnaestheticRecord found with the given id.
     */
    AnaestheticRecord delete(Integer anaestheticrecordId);

    /**
     * Deletes an existing AnaestheticRecord with the given object.
     *
     * @param anaestheticRecord The instance of the AnaestheticRecord to be deleted; value cannot be null.
     */
    void delete(AnaestheticRecord anaestheticRecord);

    /**
     * Find all AnaestheticRecords matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AnaestheticRecords.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AnaestheticRecord> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AnaestheticRecords matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AnaestheticRecords.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnaestheticRecord> findAll(String query, Pageable pageable);

    /**
     * Exports all AnaestheticRecords matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AnaestheticRecords matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AnaestheticRecords in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AnaestheticRecord.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated anaestheticIvdrugs for given AnaestheticRecord id.
     *
     * @param idno value of idno; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnaestheticIvdrug instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnaestheticIvdrug> findAssociatedAnaestheticIvdrugs(Integer idno, Pageable pageable);

    /*
     * Returns the associated anaestheticIvfluids for given AnaestheticRecord id.
     *
     * @param idno value of idno; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnaestheticIvfluid instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnaestheticIvfluid> findAssociatedAnaestheticIvfluids(Integer idno, Pageable pageable);

    /*
     * Returns the associated obses for given AnaestheticRecord id.
     *
     * @param idno value of idno; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Obs instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Obs> findAssociatedObses(Integer idno, Pageable pageable);

}