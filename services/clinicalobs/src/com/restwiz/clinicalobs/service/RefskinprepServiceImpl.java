/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refskinprep;


/**
 * ServiceImpl object for domain model class Refskinprep.
 *
 * @see Refskinprep
 */
@Service("clinicalobs.RefskinprepService")
@Validated
public class RefskinprepServiceImpl implements RefskinprepService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefskinprepServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefskinprepDao")
    private WMGenericDao<Refskinprep, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refskinprep, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refskinprep create(Refskinprep refskinprep) {
        LOGGER.debug("Creating a new Refskinprep with information: {}", refskinprep);

        Refskinprep refskinprepCreated = this.wmGenericDao.create(refskinprep);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refskinprepCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refskinprep getById(Integer refskinprepId) {
        LOGGER.debug("Finding Refskinprep by id: {}", refskinprepId);
        return this.wmGenericDao.findById(refskinprepId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refskinprep findById(Integer refskinprepId) {
        LOGGER.debug("Finding Refskinprep by id: {}", refskinprepId);
        try {
            return this.wmGenericDao.findById(refskinprepId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refskinprep found with id: {}", refskinprepId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refskinprep> findByMultipleIds(List<Integer> refskinprepIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refskinpreps by ids: {}", refskinprepIds);

        return this.wmGenericDao.findByMultipleIds(refskinprepIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refskinprep update(Refskinprep refskinprep) {
        LOGGER.debug("Updating Refskinprep with information: {}", refskinprep);

        this.wmGenericDao.update(refskinprep);
        this.wmGenericDao.refresh(refskinprep);

        return refskinprep;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refskinprep delete(Integer refskinprepId) {
        LOGGER.debug("Deleting Refskinprep with id: {}", refskinprepId);
        Refskinprep deleted = this.wmGenericDao.findById(refskinprepId);
        if (deleted == null) {
            LOGGER.debug("No Refskinprep found with id: {}", refskinprepId);
            throw new EntityNotFoundException(String.valueOf(refskinprepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refskinprep refskinprep) {
        LOGGER.debug("Deleting Refskinprep with {}", refskinprep);
        this.wmGenericDao.delete(refskinprep);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refskinprep> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refskinpreps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refskinprep> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refskinpreps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refskinprep to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refskinprep to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}