/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Allergies;
import com.restwiz.clinicalobs.PtAllergy;


/**
 * ServiceImpl object for domain model class Allergies.
 *
 * @see Allergies
 */
@Service("clinicalobs.AllergiesService")
@Validated
public class AllergiesServiceImpl implements AllergiesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllergiesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("clinicalobs.PtAllergyService")
    private PtAllergyService ptAllergyService;

    @Autowired
    @Qualifier("clinicalobs.AllergiesDao")
    private WMGenericDao<Allergies, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Allergies, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Allergies create(Allergies allergies) {
        LOGGER.debug("Creating a new Allergies with information: {}", allergies);

        Allergies allergiesCreated = this.wmGenericDao.create(allergies);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(allergiesCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Allergies getById(Integer allergiesId) {
        LOGGER.debug("Finding Allergies by id: {}", allergiesId);
        return this.wmGenericDao.findById(allergiesId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Allergies findById(Integer allergiesId) {
        LOGGER.debug("Finding Allergies by id: {}", allergiesId);
        try {
            return this.wmGenericDao.findById(allergiesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Allergies found with id: {}", allergiesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Allergies> findByMultipleIds(List<Integer> allergiesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Allergies by ids: {}", allergiesIds);

        return this.wmGenericDao.findByMultipleIds(allergiesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Allergies update(Allergies allergies) {
        LOGGER.debug("Updating Allergies with information: {}", allergies);

        this.wmGenericDao.update(allergies);
        this.wmGenericDao.refresh(allergies);

        return allergies;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Allergies delete(Integer allergiesId) {
        LOGGER.debug("Deleting Allergies with id: {}", allergiesId);
        Allergies deleted = this.wmGenericDao.findById(allergiesId);
        if (deleted == null) {
            LOGGER.debug("No Allergies found with id: {}", allergiesId);
            throw new EntityNotFoundException(String.valueOf(allergiesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Allergies allergies) {
        LOGGER.debug("Deleting Allergies with {}", allergies);
        this.wmGenericDao.delete(allergies);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Allergies> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Allergies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Allergies> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Allergies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Allergies to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Allergies to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtAllergy> findAssociatedPtAllergiesForObsptid(Integer allergyId, Pageable pageable) {
        LOGGER.debug("Fetching all associated ptAllergiesForObsptid");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("allergiesByObsptid.allergyId = '" + allergyId + "'");

        return ptAllergyService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<PtAllergy> findAssociatedPtAllergiesForFkAllergy(Integer allergyId, Pageable pageable) {
        LOGGER.debug("Fetching all associated ptAllergiesForFkAllergy");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("allergiesByFkAllergy.allergyId = '" + allergyId + "'");

        return ptAllergyService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PtAllergyService instance
     */
    protected void setPtAllergyService(PtAllergyService service) {
        this.ptAllergyService = service;
    }

}