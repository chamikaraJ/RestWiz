/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refirrigationsolutions;


/**
 * ServiceImpl object for domain model class Refirrigationsolutions.
 *
 * @see Refirrigationsolutions
 */
@Service("clinicalobs.RefirrigationsolutionsService")
@Validated
public class RefirrigationsolutionsServiceImpl implements RefirrigationsolutionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefirrigationsolutionsServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefirrigationsolutionsDao")
    private WMGenericDao<Refirrigationsolutions, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refirrigationsolutions, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refirrigationsolutions create(Refirrigationsolutions refirrigationsolutions) {
        LOGGER.debug("Creating a new Refirrigationsolutions with information: {}", refirrigationsolutions);

        Refirrigationsolutions refirrigationsolutionsCreated = this.wmGenericDao.create(refirrigationsolutions);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refirrigationsolutionsCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refirrigationsolutions getById(Integer refirrigationsolutionsId) {
        LOGGER.debug("Finding Refirrigationsolutions by id: {}", refirrigationsolutionsId);
        return this.wmGenericDao.findById(refirrigationsolutionsId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refirrigationsolutions findById(Integer refirrigationsolutionsId) {
        LOGGER.debug("Finding Refirrigationsolutions by id: {}", refirrigationsolutionsId);
        try {
            return this.wmGenericDao.findById(refirrigationsolutionsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refirrigationsolutions found with id: {}", refirrigationsolutionsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refirrigationsolutions> findByMultipleIds(List<Integer> refirrigationsolutionsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refirrigationsolutions by ids: {}", refirrigationsolutionsIds);

        return this.wmGenericDao.findByMultipleIds(refirrigationsolutionsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refirrigationsolutions update(Refirrigationsolutions refirrigationsolutions) {
        LOGGER.debug("Updating Refirrigationsolutions with information: {}", refirrigationsolutions);

        this.wmGenericDao.update(refirrigationsolutions);
        this.wmGenericDao.refresh(refirrigationsolutions);

        return refirrigationsolutions;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refirrigationsolutions delete(Integer refirrigationsolutionsId) {
        LOGGER.debug("Deleting Refirrigationsolutions with id: {}", refirrigationsolutionsId);
        Refirrigationsolutions deleted = this.wmGenericDao.findById(refirrigationsolutionsId);
        if (deleted == null) {
            LOGGER.debug("No Refirrigationsolutions found with id: {}", refirrigationsolutionsId);
            throw new EntityNotFoundException(String.valueOf(refirrigationsolutionsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refirrigationsolutions refirrigationsolutions) {
        LOGGER.debug("Deleting Refirrigationsolutions with {}", refirrigationsolutions);
        this.wmGenericDao.delete(refirrigationsolutions);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refirrigationsolutions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refirrigationsolutions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refirrigationsolutions> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refirrigationsolutions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refirrigationsolutions to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refirrigationsolutions to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}