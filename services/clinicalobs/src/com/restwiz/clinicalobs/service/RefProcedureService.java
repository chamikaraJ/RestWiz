/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.PtProcedure;
import com.restwiz.clinicalobs.RefProcedure;

/**
 * Service object for domain model class {@link RefProcedure}.
 */
public interface RefProcedureService {

    /**
     * Creates a new RefProcedure. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RefProcedure if any.
     *
     * @param refProcedure Details of the RefProcedure to be created; value cannot be null.
     * @return The newly created RefProcedure.
     */
    RefProcedure create(@Valid RefProcedure refProcedure);


	/**
     * Returns RefProcedure by given id if exists.
     *
     * @param refprocedureId The id of the RefProcedure to get; value cannot be null.
     * @return RefProcedure associated with the given refprocedureId.
	 * @throws EntityNotFoundException If no RefProcedure is found.
     */
    RefProcedure getById(Integer refprocedureId);

    /**
     * Find and return the RefProcedure by given id if exists, returns null otherwise.
     *
     * @param refprocedureId The id of the RefProcedure to get; value cannot be null.
     * @return RefProcedure associated with the given refprocedureId.
     */
    RefProcedure findById(Integer refprocedureId);

	/**
     * Find and return the list of RefProcedures by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param refprocedureIds The id's of the RefProcedure to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return RefProcedures associated with the given refprocedureIds.
     */
    List<RefProcedure> findByMultipleIds(List<Integer> refprocedureIds, boolean orderedReturn);


    /**
     * Updates the details of an existing RefProcedure. It replaces all fields of the existing RefProcedure with the given refProcedure.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RefProcedure if any.
     *
     * @param refProcedure The details of the RefProcedure to be updated; value cannot be null.
     * @return The updated RefProcedure.
     * @throws EntityNotFoundException if no RefProcedure is found with given input.
     */
    RefProcedure update(@Valid RefProcedure refProcedure);

    /**
     * Deletes an existing RefProcedure with the given id.
     *
     * @param refprocedureId The id of the RefProcedure to be deleted; value cannot be null.
     * @return The deleted RefProcedure.
     * @throws EntityNotFoundException if no RefProcedure found with the given id.
     */
    RefProcedure delete(Integer refprocedureId);

    /**
     * Deletes an existing RefProcedure with the given object.
     *
     * @param refProcedure The instance of the RefProcedure to be deleted; value cannot be null.
     */
    void delete(RefProcedure refProcedure);

    /**
     * Find all RefProcedures matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RefProcedures.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<RefProcedure> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all RefProcedures matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RefProcedures.
     *
     * @see Pageable
     * @see Page
     */
    Page<RefProcedure> findAll(String query, Pageable pageable);

    /**
     * Exports all RefProcedures matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all RefProcedures matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the RefProcedures in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the RefProcedure.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated ptProcedures for given RefProcedure id.
     *
     * @param idno value of idno; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PtProcedure instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PtProcedure> findAssociatedPtProcedures(Integer idno, Pageable pageable);

}