/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Proceduremedications;


/**
 * ServiceImpl object for domain model class Proceduremedications.
 *
 * @see Proceduremedications
 */
@Service("clinicalobs.ProceduremedicationsService")
@Validated
public class ProceduremedicationsServiceImpl implements ProceduremedicationsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProceduremedicationsServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.ProceduremedicationsDao")
    private WMGenericDao<Proceduremedications, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Proceduremedications, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Proceduremedications create(Proceduremedications proceduremedications) {
        LOGGER.debug("Creating a new Proceduremedications with information: {}", proceduremedications);

        Proceduremedications proceduremedicationsCreated = this.wmGenericDao.create(proceduremedications);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(proceduremedicationsCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Proceduremedications getById(Integer proceduremedicationsId) {
        LOGGER.debug("Finding Proceduremedications by id: {}", proceduremedicationsId);
        return this.wmGenericDao.findById(proceduremedicationsId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Proceduremedications findById(Integer proceduremedicationsId) {
        LOGGER.debug("Finding Proceduremedications by id: {}", proceduremedicationsId);
        try {
            return this.wmGenericDao.findById(proceduremedicationsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Proceduremedications found with id: {}", proceduremedicationsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Proceduremedications> findByMultipleIds(List<Integer> proceduremedicationsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Proceduremedications by ids: {}", proceduremedicationsIds);

        return this.wmGenericDao.findByMultipleIds(proceduremedicationsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Proceduremedications update(Proceduremedications proceduremedications) {
        LOGGER.debug("Updating Proceduremedications with information: {}", proceduremedications);

        this.wmGenericDao.update(proceduremedications);
        this.wmGenericDao.refresh(proceduremedications);

        return proceduremedications;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Proceduremedications delete(Integer proceduremedicationsId) {
        LOGGER.debug("Deleting Proceduremedications with id: {}", proceduremedicationsId);
        Proceduremedications deleted = this.wmGenericDao.findById(proceduremedicationsId);
        if (deleted == null) {
            LOGGER.debug("No Proceduremedications found with id: {}", proceduremedicationsId);
            throw new EntityNotFoundException(String.valueOf(proceduremedicationsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Proceduremedications proceduremedications) {
        LOGGER.debug("Deleting Proceduremedications with {}", proceduremedications);
        this.wmGenericDao.delete(proceduremedications);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Proceduremedications> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Proceduremedications");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Proceduremedications> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Proceduremedications");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Proceduremedications to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Proceduremedications to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}