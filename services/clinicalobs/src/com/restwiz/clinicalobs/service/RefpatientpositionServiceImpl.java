/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restwiz.clinicalobs.Refpatientposition;


/**
 * ServiceImpl object for domain model class Refpatientposition.
 *
 * @see Refpatientposition
 */
@Service("clinicalobs.RefpatientpositionService")
@Validated
public class RefpatientpositionServiceImpl implements RefpatientpositionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefpatientpositionServiceImpl.class);


    @Autowired
    @Qualifier("clinicalobs.RefpatientpositionDao")
    private WMGenericDao<Refpatientposition, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refpatientposition, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refpatientposition create(Refpatientposition refpatientposition) {
        LOGGER.debug("Creating a new Refpatientposition with information: {}", refpatientposition);

        Refpatientposition refpatientpositionCreated = this.wmGenericDao.create(refpatientposition);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refpatientpositionCreated);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refpatientposition getById(Integer refpatientpositionId) {
        LOGGER.debug("Finding Refpatientposition by id: {}", refpatientpositionId);
        return this.wmGenericDao.findById(refpatientpositionId);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Refpatientposition findById(Integer refpatientpositionId) {
        LOGGER.debug("Finding Refpatientposition by id: {}", refpatientpositionId);
        try {
            return this.wmGenericDao.findById(refpatientpositionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refpatientposition found with id: {}", refpatientpositionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public List<Refpatientposition> findByMultipleIds(List<Integer> refpatientpositionIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refpatientpositions by ids: {}", refpatientpositionIds);

        return this.wmGenericDao.findByMultipleIds(refpatientpositionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "clinicalobsTransactionManager")
    @Override
    public Refpatientposition update(Refpatientposition refpatientposition) {
        LOGGER.debug("Updating Refpatientposition with information: {}", refpatientposition);

        this.wmGenericDao.update(refpatientposition);
        this.wmGenericDao.refresh(refpatientposition);

        return refpatientposition;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public Refpatientposition delete(Integer refpatientpositionId) {
        LOGGER.debug("Deleting Refpatientposition with id: {}", refpatientpositionId);
        Refpatientposition deleted = this.wmGenericDao.findById(refpatientpositionId);
        if (deleted == null) {
            LOGGER.debug("No Refpatientposition found with id: {}", refpatientpositionId);
            throw new EntityNotFoundException(String.valueOf(refpatientpositionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "clinicalobsTransactionManager")
    @Override
    public void delete(Refpatientposition refpatientposition) {
        LOGGER.debug("Deleting Refpatientposition with {}", refpatientposition);
        this.wmGenericDao.delete(refpatientposition);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refpatientposition> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refpatientpositions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Refpatientposition> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refpatientpositions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refpatientposition to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service clinicalobs for table Refpatientposition to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "clinicalobsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}