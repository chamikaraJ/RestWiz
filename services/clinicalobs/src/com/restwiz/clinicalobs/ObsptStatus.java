/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.restwiz.clinicalobs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * ObsptStatus generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ObsptStatus`")
public class ObsptStatus implements Serializable {

    private Integer idno;
    private Integer fkObsPatient;
    private Integer fkParentStatus;
    private Integer fkRefStatus;
    private String newStatus;
    private String oldStatus;
    private String statusChangedBy;
    private Timestamp statusChangedDate;
    private Boolean isActive;
    private Refstatus refstatus;
    private ObsptStatus obsptStatusByFkParentStatus;
    private Obspatients obspatients;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`idno`", nullable = false, scale = 0, precision = 10)
    public Integer getIdno() {
        return this.idno;
    }

    public void setIdno(Integer idno) {
        this.idno = idno;
    }

    @Column(name = "`fkObsPatient`", nullable = true, scale = 0, precision = 10)
    public Integer getFkObsPatient() {
        return this.fkObsPatient;
    }

    public void setFkObsPatient(Integer fkObsPatient) {
        this.fkObsPatient = fkObsPatient;
    }

    @Column(name = "`fkParentStatus`", nullable = true, scale = 0, precision = 10)
    public Integer getFkParentStatus() {
        return this.fkParentStatus;
    }

    public void setFkParentStatus(Integer fkParentStatus) {
        this.fkParentStatus = fkParentStatus;
    }

    @Column(name = "`fkRefStatus`", nullable = true, scale = 0, precision = 10)
    public Integer getFkRefStatus() {
        return this.fkRefStatus;
    }

    public void setFkRefStatus(Integer fkRefStatus) {
        this.fkRefStatus = fkRefStatus;
    }

    @Column(name = "`newStatus`", nullable = true, length = 255)
    public String getNewStatus() {
        return this.newStatus;
    }

    public void setNewStatus(String newStatus) {
        this.newStatus = newStatus;
    }

    @Column(name = "`oldStatus`", nullable = true, length = 255)
    public String getOldStatus() {
        return this.oldStatus;
    }

    public void setOldStatus(String oldStatus) {
        this.oldStatus = oldStatus;
    }

    @Column(name = "`statusChangedBy`", nullable = true, length = 255)
    public String getStatusChangedBy() {
        return this.statusChangedBy;
    }

    public void setStatusChangedBy(String statusChangedBy) {
        this.statusChangedBy = statusChangedBy;
    }

    @Column(name = "`statusChangedDate`", nullable = false)
    public Timestamp getStatusChangedDate() {
        return this.statusChangedDate;
    }

    public void setStatusChangedDate(Timestamp statusChangedDate) {
        this.statusChangedDate = statusChangedDate;
    }

    @Column(name = "`isActive`", nullable = true)
    public Boolean getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fkRefStatus`", referencedColumnName = "`idno`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ObsptStatus_TO_ptstatW9xul`"))
    @Fetch(FetchMode.JOIN)
    public Refstatus getRefstatus() {
        return this.refstatus;
    }

    public void setRefstatus(Refstatus refstatus) {
        if(refstatus != null) {
            this.fkRefStatus = refstatus.getIdno();
        }

        this.refstatus = refstatus;
    }

    // ignoring self relation properties to avoid circular loops & unwanted fields from the related entity.
    @JsonIgnoreProperties({"obsptStatusByFkParentStatus", "obsptStatusesForFkParentStatus"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fkParentStatus`", referencedColumnName = "`idno`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ObsptStatus_TO_ObsptSU3UYv`"))
    @Fetch(FetchMode.JOIN)
    public ObsptStatus getObsptStatusByFkParentStatus() {
        return this.obsptStatusByFkParentStatus;
    }

    public void setObsptStatusByFkParentStatus(ObsptStatus obsptStatusByFkParentStatus) {
        if(obsptStatusByFkParentStatus != null) {
            this.fkParentStatus = obsptStatusByFkParentStatus.getIdno();
        }

        this.obsptStatusByFkParentStatus = obsptStatusByFkParentStatus;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fkObsPatient`", referencedColumnName = "`obsptid`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ObsptStatus_TO_obspatFeIU7`"))
    @Fetch(FetchMode.JOIN)
    public Obspatients getObspatients() {
        return this.obspatients;
    }

    public void setObspatients(Obspatients obspatients) {
        if(obspatients != null) {
            this.fkObsPatient = obspatients.getObsptid();
        }

        this.obspatients = obspatients;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ObsptStatus)) return false;
        final ObsptStatus obsptStatus = (ObsptStatus) o;
        return Objects.equals(getIdno(), obsptStatus.getIdno());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdno());
    }
}